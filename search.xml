<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>pickle 库</title>
    <url>/2022/01/30/pickle%20%E5%BA%93/</url>
    <content><![CDATA[<p>pickle 库的简单使用。</p>
<span id="more"></span>
<h1 id="前言">前言</h1>
<p>官方文档：<a href="https://docs.python.org/zh-cn/3/library/pickle.html">pickle</a></p>
<h1 id="介绍">介绍</h1>
<p>模块 pickle 实现了对一个 Python 对象结构的二进制序列化和反序列化。</p>
<h1 id="常用方法">常用方法</h1>
<p>主要由两类接口，即序列化和反序列化。</p>
<p>其中序列化包括： 1. dump() 2. dumps()</p>
<p>反序列化包括： 1. load() 2. loads()</p>
<p><strong>序列化后的对象是 bytes 类型的，反序列后的对象同样也是 bytes 类型的，也就是二进制文件。</strong></p>
<h2 id="dump">dump</h2>
<p>语法： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pickle.dump(obj, file, protocol=<span class="literal">None</span>, *, fiximports=<span class="literal">True</span>, buffer_callback=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>将对象 obj 序列化以后的对象写入已打开的 file object file。</p>
</blockquote>
<p>参数： 主要参数就是前两个： - obj：要序列化的对象 - file：序列化完之后的对象需要写入到 file 中。</p>
<p>例子： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">tar = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;lihua&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;  </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pickle使用的文件/after.p&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    pickle.dump(tar, f)</span><br></pre></td></tr></table></figure></p>
<h2 id="dumps">dumps</h2>
<p>语法： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pickle.dump(obj, protocol=<span class="literal">None</span>, *, fiximports=<span class="literal">True</span>, buffer_callback=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p>
<p>参数： - obj：要序列化的对象 - 少了 file</p>
<ul>
<li>返回值 <strong>直接返回序列化后的二进制对象。（这是与 dump 最大的区别）</strong></li>
</ul>
<p>例子： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">tar = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;lihua&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(tar))</span><br></pre></td></tr></table></figure></p>
<p>结果： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\x80\x04\x95\x1c\x00\x00\x00\x00\x00\x00\x00&#125;\x94(\x8c\x04name\x94\x8c\x05lihua\x94\x8c\x03age\x94K\x1eu.&#x27;</span><br></pre></td></tr></table></figure></p>
<h2 id="load">load</h2>
<p>语法： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pickle.load(file, *, protocol=<span class="literal">None</span>, fiximports=<span class="literal">True</span>, encoding=<span class="string">&#x27;ASCII&#x27;</span>, errors=<span class="string">&#x27;strict&#x27;</span>, buffers=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p>
<p>参数： - file：要反序列的<strong>二进制文件</strong></p>
<p>例子： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pickle使用的文件/after.p&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    <span class="built_in">print</span>(pickle.load(f))</span><br></pre></td></tr></table></figure></p>
<p>利用上面的 dump 的序列化后的二进制文件做演示，得到结果： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;name&#x27;: &#x27;lihua&#x27;, &#x27;age&#x27;: 30&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="loads">loads</h2>
<p>语法： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pickle.loads(data, /, *, fix_imports=<span class="literal">True</span>, encoding=<span class="string">&quot;ASCII&quot;</span>, errors=<span class="string">&quot;strict&quot;</span>, buffers=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p>
<p>参数： - data：需要反序列化的<strong>二进制对象</strong></p>
<p>返回值： <strong>直接返回反序列化后的对象。（这是与 load 的最大区别）</strong></p>
<p>例子： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">tar = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;lihua&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;</span><br><span class="line">tars = pickle.dumps(tar)  <span class="comment"># 先序列化</span></span><br><span class="line"><span class="built_in">print</span>(pickle.loads(tars)) <span class="comment"># 再反序列化</span></span><br></pre></td></tr></table></figure></p>
<p>结果： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;name&#x27;: &#x27;lihua&#x27;, &#x27;age&#x27;: 30&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pickle</tag>
      </tags>
  </entry>
  <entry>
    <title>python_challenge 记录</title>
    <url>/2022/01/29/python_challenge%20%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>这是个人的 python challenge 的刷题记录，网址是：<a href="http://www.pythonchallenge.com/">python challenge</a>。更多内容请点击 <strong>阅读全文</strong>，如有错误，欢迎在评论区指出。</p>
<span id="more"></span>
<h1 id="level-0">level 0</h1>
<h2 id="题目信息">题目信息</h2>
<p>题目信息如下：</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220129214059.png" /></p>
<p>提示：修改 url 的值，并且画面中为 <span class="math inline">\(2^{38}\)</span>，当前 url 为： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.pythonchallenge.com/pc/def/0.html</span><br></pre></td></tr></table></figure></p>
<h2 id="方法">方法</h2>
<p>代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = <span class="number">2</span> ** <span class="number">38</span></span><br><span class="line"><span class="built_in">print</span>(res) <span class="comment"># 274877906944</span></span><br></pre></td></tr></table></figure></p>
<p>将 url 中的 0 用 274877906944 代替即可。</p>
<h1 id="level-1">level 1</h1>
<h2 id="题目信息-1">题目信息</h2>
<p>题目信息如下：</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220129215240.png" /></p>
<p>根据图片应该是某种加密方法，图中的 <code>K-&gt;M, O-&gt;Q, E-&gt;G</code>，正好符合规律：<strong>K往后两个字母就是M，O往后两个字母就是Q，E往后两个字母就是G</strong>。猜测只要把下面粉色的字母全部用自己的后两个字母代替即可。</p>
<h2 id="方法-1">方法 1</h2>
<p>代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">encypt_str = <span class="string">&quot;g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr&#x27;q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj. &quot;</span> <span class="comment"># 原来的字符串  </span></span><br><span class="line">  </span><br><span class="line">shift = <span class="number">2</span> <span class="comment"># 后移步数  </span></span><br><span class="line">new_str = <span class="string">&quot;&quot;</span> <span class="comment"># 新的字符串  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> encypt_str:  </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span>.isalpha(ch): <span class="comment"># 判断是否是字母  </span></span><br><span class="line">        ch = <span class="built_in">ord</span>(ch)</span><br><span class="line">        ch = ((ch + shift) - <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span> <span class="comment">#  y 和 z 变成 a 和 b</span></span><br><span class="line">        ch = <span class="built_in">chr</span>(ch)  </span><br><span class="line">    new_str += ch  </span><br><span class="line"><span class="built_in">print</span>(new_str)</span><br></pre></td></tr></table></figure> （需要注意的是 y 和 z 变成 a 和 b 的时候！！！）</p>
<p>结果： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i hope you didnt translate it by hand. thats what computers are for. doing it in by hand is inefficient and that&#x27;s why this text is so long. using string.maketrans() is recommended. now apply on the url.</span><br></pre></td></tr></table></figure></p>
<p>发现除了提示我们可以使用 maketrans() 方法之外，没有其他信息。我们回到 url <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.pythonchallenge.com/pc/def/map.html</span><br></pre></td></tr></table></figure></p>
<p>根据本题的加密方法，将 <code>map -&gt; ocr</code> 即可跳转下一关。 （其实，连代码都没必要写！！！）</p>
<h2 id="方法-2">方法 2</h2>
<h3 id="maketrans-方法介绍">maketrans() 方法介绍</h3>
<blockquote>
<p>Python maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。 <strong>注：</strong>两个字符串的长度必须相同，为一一对应的关系。python 3 和 python 2 的使用方法不同，2 需要导入 string，而 3 不需要。</p>
</blockquote>
<ul>
<li><p>语法： <code>str.maketrans(intab, outtab)</code></p></li>
<li><p>参数：</p>
<ul>
<li>intab：字符串中要替代的字符组成的字符串。</li>
<li>outab：与 intab 一一对应的映射字符的字符串。</li>
</ul></li>
<li><p>返回值： 返回字符串转换后生成的新字符串。</p></li>
<li><p>一般配合 translate() 使用</p></li>
</ul>
<h3 id="translate-方法介绍">translate() 方法介绍</h3>
<blockquote>
<p>Python translate() 方法根据参数table给出的表(包含 256 个字符)转换字符串的字符, 要过滤掉的字符放到 del 参数中。</p>
</blockquote>
<ul>
<li><p>语法： <code>str.translate(table[, deletechars]);</code></p></li>
<li><p>参数：</p>
<ul>
<li>table：翻译表，翻译表是通过maketrans方法转换而来。</li>
<li>deletechars：字符串中要过滤的字符列表。</li>
</ul></li>
<li><p>返回值： 返回翻译后的字符串。</p></li>
<li><p>本题演示： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">encypt_str = <span class="string">&quot;g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr&#x27;q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj. &quot;</span></span><br><span class="line"></span><br><span class="line">intab = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>  </span><br><span class="line">outtab = <span class="string">&quot;cdefghijklmnopqrstuvwxyzab&quot;</span>  </span><br><span class="line">trantab = encypt_str.maketrans(intab, outtab)  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(encypt_str.translate(trantab))</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="方法-3">方法 3</h2>
<h3 id="zip-方法介绍">zip() 方法介绍</h3>
<blockquote>
<p><strong>zip()</strong> 函数用于将可迭代的对象作为参数，将对象中 <strong>对应的元素</strong> 打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。 我们可以使用 list() 转换来输出列表。也可以用 dict() 转换为字典，此时就产生了映射关系。 如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。</p>
</blockquote>
<ul>
<li><p>语法： <code>zip([iterable, ...])</code></p></li>
<li><p>参数：</p>
<ul>
<li>iterabl：一个或多个迭代器</li>
</ul></li>
<li><p>返回值： 返回一个对象。</p></li>
<li><p>解压： <code>zip(*被压缩的对象)</code>，返回二维矩阵式</p></li>
<li><p>本题演示： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">encypt_str = <span class="string">&quot;g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr&#x27;q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj. &quot;</span> <span class="comment"># 原来的字符串</span></span><br><span class="line"></span><br><span class="line">intab = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz,. &#x27;()&quot;</span>  </span><br><span class="line">outtab = <span class="string">&quot;cdefghijklmnopqrstuvwxyzab,. &#x27;()&quot;</span>  </span><br><span class="line">transtab = <span class="built_in">dict</span>(<span class="built_in">zip</span>(intab, outtab))  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(transtab[x] <span class="keyword">for</span> x <span class="keyword">in</span> encypt_str))</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h1 id="level-2">level 2</h1>
<h2 id="题目信息-2">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130103607.png" /></p>
<p>注意红色字符串，要我们从图片中的书里或者页面源码中找字符。首先，书里根本看不清，所以只能从页面源码中找，打开页面源码，往下滑动，发现确实有，但是内容很多，需要写脚本。 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130103757.png" /></p>
<h2 id="方法-4">方法</h2>
<p><strong>步骤：</strong></p>
<ol type="1">
<li><p>请求网址，获得页面源码</p></li>
<li><p>拿到这串字符串</p></li>
<li><p>从中找出字母</p></li>
</ol>
<p><strong>代码：</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line"><span class="keyword">import</span> re  </span><br><span class="line">url = <span class="string">&quot;http://www.pythonchallenge.com/pc/def/ocr.html&quot;</span>  </span><br><span class="line">r = requests.get(url)  </span><br><span class="line">tar = re.findall(<span class="string">r&#x27;&lt;!--(.*?)--&gt;&#x27;</span>, r.text, flags=re.S)[<span class="number">1</span>]  <span class="comment"># 找到一大串字符串</span></span><br><span class="line">ch_lst = re.findall(<span class="string">r&#x27;[a-zA-Z0-9]+&#x27;</span>, tar)  <span class="comment"># 拿到字符串中的字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(ch <span class="keyword">for</span> ch <span class="keyword">in</span> ch_lst)) <span class="comment"># 拼接成 url</span></span><br></pre></td></tr></table></figure></p>
<p><strong>结果：</strong> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">equality</span><br></pre></td></tr></table></figure></p>
<p>修改 url： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改前：http://www.pythonchallenge.com/pc/def/ocr.html</span><br><span class="line">修改后：http://www.pythonchallenge.com/pc/def/equality.html</span><br></pre></td></tr></table></figure></p>
<h1 id="level-3">level 3</h1>
<h2 id="题目信息-3">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130142422.png" /></p>
<p>除了一句提示，什么都没有。查看页面源码，发现字符串： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130142748.png" /></p>
<p>根据提示做出合理猜测：<strong>找出这一字符串中的小写字母，每个小写字母的前后都是三个大写字母！！！也就是 AAAbCCC 类型的</strong></p>
<h2 id="方法-5">方法</h2>
<p><strong>步骤：</strong></p>
<ol type="1">
<li>请求网址，拿到页面源码</li>
<li>取出这一大串字符串</li>
<li>从中找出符合条件的小写字母</li>
</ol>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, re  </span><br><span class="line">url = <span class="string">&#x27;http://www.pythonchallenge.com/pc/def/equality.html&#x27;</span>  </span><br><span class="line">r = requests.get(url)  </span><br><span class="line">tar = re.findall(<span class="string">r&#x27;&lt;!--(.*?)--&gt;&#x27;</span>, r.text, flags = re.S)[-<span class="number">1</span>] <span class="comment"># 取出目标字符串  </span></span><br><span class="line">ch_lst = re.findall(<span class="string">r&#x27;[^A-Z]+[A-Z]&#123;3&#125;([a-z])[A-Z]&#123;3&#125;[^A-Z]+&#x27;</span>, tar, re.S)    <span class="comment"># 从目标字符串中取出符合条件的小写字母  </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(ch <span class="keyword">for</span> ch <span class="keyword">in</span> ch_lst)) <span class="comment"># 拼接成 url</span></span><br></pre></td></tr></table></figure>
<p><strong>解释：</strong> 主要说明一下取出符合条件的小写字母的模式是如何而来的。</p>
<p><code>[a-z]</code> 表示一个小写字母；</p>
<p><code>[A-Z]</code> 表示一个大写字母；</p>
<p><code>[A-Z]&#123;3&#125;</code> 表示三个大写字母；</p>
<p><code>[A-Z]&#123;3&#125;[a-z][A-Z]&#123;3&#125;</code> 表示 ...AAAbCCC... 类型的，注意 ... 可能为大写，比如说：AAAAbCCC 也是会被匹配到的，但是，题目要求的小写字母是前后严格只有三个大写字母，所以还需要补上 <code>[^A-Z]</code> ，这表示非大写字母</p>
<p>总的模式就是：<code>[^A-Z]+[A-Z]&#123;3&#125;([a-z])[A-Z]&#123;3&#125;[^A-Z]+</code>，这个 <code>+</code> 写不写无所谓，就本题而言，主要是 <code>aAAAbCCCc</code> 的都行，无所谓前后是大写还是小写。</p>
<p>结果： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">linkedlist</span><br></pre></td></tr></table></figure></p>
<p>修改 url： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改前：http://www.pythonchallenge.com/pc/def/equality.html</span><br><span class="line">修改后：http://www.pythonchallenge.com/pc/def/linkedlist.html</span><br></pre></td></tr></table></figure></p>
<p>访问修改后的 url 得到提示 <code>linkedlist.php</code> ，访问<code>http://www.pythonchallenge.com/pc/def/linkedlist.php</code> 即可。</p>
<h1 id="level-4">level 4</h1>
<h2 id="题目信息-4">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130194001.png" /></p>
<p>页面源码： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130194018.png" /></p>
<p>点击图片发现可以跳转： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130194032.png" /></p>
<p>注意 url 中的 nothing，应该是通过不停的获得 nothing 然后跳转到下一个页面，最后某个页面会出来答案。手动几次后发现确实如此： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130194143.png" /></p>
<p><strong>注意：本题深坑</strong></p>
<h2 id="方法-6">方法</h2>
<p><strong>代码：</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, re  </span><br><span class="line">nothing = <span class="number">12345</span>  </span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=%d&#x27;</span>  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">400</span>):  </span><br><span class="line">    url = <span class="built_in">str</span> % nothing  </span><br><span class="line">    r = requests.get(url)  </span><br><span class="line">    <span class="keyword">try</span>:  </span><br><span class="line">        nothing = <span class="built_in">int</span>(re.findall(<span class="string">r&#x27;\d+&#x27;</span>, r.text)[-<span class="number">1</span>])  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;nothing: %d&quot;</span> % nothing)  </span><br><span class="line">    <span class="keyword">except</span>:  </span><br><span class="line">        nothing /= <span class="number">2</span>  </span><br><span class="line">	<span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure></p>
<p><strong>解释：</strong> 首先例举一下这题我遇到的坑！</p>
<p>原先我的代码是这样的： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, re  </span><br><span class="line">nothing = <span class="number">12345</span>  </span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=%d&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">400</span>):  </span><br><span class="line">    url = <span class="built_in">str</span> % nothing</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br><span class="line">    nothing = <span class="built_in">int</span>(re.search(<span class="string">r&#x27;\d+&#x27;</span>, r.text).group())</span><br></pre></td></tr></table></figure></p>
<p>运行一段时间后，得到如下报错： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AttributeError: &#x27;NoneType&#x27; object has no attribute &#x27;group&#x27;</span><br></pre></td></tr></table></figure></p>
<p>并且此时页面的内容为： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Yes. Divide by two and keep going.</span><br></pre></td></tr></table></figure></p>
<p>因为此时页面并没有数字，无法匹配，也就没有返回匹配对象，更加没有 group() 方法，所以报错。因此，我将代码修改为如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, re  </span><br><span class="line">nothing = <span class="number">12345</span>  </span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=%d&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">400</span>):  </span><br><span class="line">    url = <span class="built_in">str</span> % nothing  </span><br><span class="line">    r = requests.get(url)  </span><br><span class="line">    <span class="keyword">try</span>:  </span><br><span class="line">        nothing = <span class="built_in">int</span>(re.search(<span class="string">r&#x27;\d+&#x27;</span>, r.text).group())  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;nothing: %d&quot;</span> % nothing)  </span><br><span class="line">    <span class="keyword">except</span>:  </span><br><span class="line">        nothing /= <span class="number">2</span></span><br><span class="line">		<span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure></p>
<p>然后能够越过这个坑： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130195351.png" /></p>
<p>跳进下一个坑： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130195449.png" /></p>
<p>当 nothing = 82683 时，页面内容如下： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You&#x27;ve been misleaded to here. Go to previous one and check.</span><br></pre></td></tr></table></figure></p>
<p>前一个是 82682，页面内容如下： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">There maybe misleading numbers in the text. One example is 82683. Look only for the next nothing and the next nothing is 63579</span><br></pre></td></tr></table></figure></p>
<p>因为 re.search() 匹配到第一个就会返回，所以才会踩到这个坑，这里的 nothing 是第二个，所以修改为最终代码，就是刚刚给的，最后顺利得到结果： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130200232.png" /></p>
<p>这里其实存在着另一个坑，得到 peak.html 的 nothing = 66831，此时如果你没有显示每一页的内容 <code>print(r.text)</code>，极容易错过信息，因为此时 nothing /= 2，也能访问，看后面能够继续就知道了。</p>
<p>修改 url： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改前：http://www.pythonchallenge.com/pc/def/linkedlist.php</span><br><span class="line">修改后：http://www.pythonchallenge.com/pc/def/peak.html</span><br></pre></td></tr></table></figure></p>
<p><strong>注意：</strong> 遇到坑之后的 nothing 不要从头开始，这样会省时间。</p>
<h1 id="level-5">level 5</h1>
<h2 id="题目信息-5">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130205619.png" /></p>
<p>页面源码： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130205643.png" /></p>
<p>注意绿字提醒：python 中有一个库叫做 pickle，用来序列化和非序列化的。因此，本题需要使用到该库。还有 <code>banner.p</code> 点进去发现是看不懂的一堆字符串，做一个合理的猜测：<strong><code>banner.p</code> 中的字符串是经过序列化的，将它反序列应该会得到答案</strong></p>
<h2 id="方法-7">方法</h2>
<p><strong>代码：</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, pickle  </span><br><span class="line">url = <span class="string">&#x27;http://www.pythonchallenge.com/pc/def/banner.p&#x27;</span>  </span><br><span class="line">raw = requests.get(url).content  </span><br><span class="line"><span class="built_in">print</span>(pickle.loads(raw))</span><br></pre></td></tr></table></figure></p>
<p>发现得到看不懂的一堆东西： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130210254.png" /></p>
<p>仔细观察发现，是一个二元列表，每一行都是由一个或多个元组组成的，猜测（看完答案后）：<strong>每一行其实都是字符串的压缩：将一行字符串压缩成 <code>[(字符1，出现次数), (字符2，出现次数)...]</code> 因此，只要将每一行还原成原来的样子即可。</strong></p>
<p><strong>最终代码：</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, pickle  </span><br><span class="line">url = <span class="string">&#x27;http://www.pythonchallenge.com/pc/def/banner.p&#x27;</span>  </span><br><span class="line">raw = requests.get(url).content  <span class="comment"># 转为 byte，因为 loads() 的参数是 byte 类型的</span></span><br><span class="line">data = pickle.loads(raw)  </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> data:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join([ch * num <span class="keyword">for</span> ch, num <span class="keyword">in</span> line]))</span><br></pre></td></tr></table></figure></p>
<p><strong>结果：</strong> <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130210708.png" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">channel</span><br></pre></td></tr></table></figure>
<p>修改 url： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改前：http://www.pythonchallenge.com/pc/def/peak.html</span><br><span class="line">修改后：http://www.pythonchallenge.com/pc/def/channel.html</span><br></pre></td></tr></table></figure></p>
<h1 id="level-6">level 6</h1>
<h2 id="题目信息-6">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220131103728.png" /></p>
<p>查看页面源码： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220131103745.png" /></p>
<p>注意：html 旁边的 <code>&lt;!-- &lt;-- zip --&gt;</code>。尝试将 html 修改为 zip 发现可以下载一个压缩文件。</p>
<p>压缩文包里有许多文件，先看 <code>readme.txt</code>： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">welcome to my zipped list.  </span><br><span class="line">  </span><br><span class="line">hint1: start from 90052  </span><br><span class="line">hint2: answer is inside the zip</span><br></pre></td></tr></table></figure></p>
<p>查看之后猜测，除 <code>readme.txt</code> 之外每一个文件内容都是： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Next nothing is (\d+)</span><br></pre></td></tr></table></figure></p>
<p>思路：<strong>nothing 从 90052 开始，先访问对应文件，然后读取下一个 nothing 继续访问。直到出现不同</strong></p>
<h2 id="方法-8">方法</h2>
<p>第一次代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re  </span><br><span class="line">rpath = <span class="string">&quot;attachments/level_6/%s.txt&quot;</span>  </span><br><span class="line">nothing = <span class="string">&quot;90052&quot;</span>  </span><br><span class="line">pattern = <span class="string">&quot;Next nothing is (\d+)&quot;</span>  </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:  </span><br><span class="line">    path = rpath % nothing  </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">        content = f.read()  </span><br><span class="line">        <span class="built_in">print</span>(content)  </span><br><span class="line">        match = re.search(pattern, content)  </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> match:  </span><br><span class="line">            <span class="keyword">break</span>  </span><br><span class="line">	nothing = match.group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p>
<p>解释： <code>match.group(1)</code>：因为代码中的 pattern 里面只有一个括号（在我们需要处加上括号），这样子匹配下来的其实是一整句话 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Next nothing is (\d+)</span><br></pre></td></tr></table></figure></p>
<p>但是，我们只需要 () ，如果直接使用 <code>match.group()</code> 就会将整句话给 nothing，而 <code>group(1)</code> 就是只读取第一个括号中的内容，也就是 () 即 nothing。</p>
<p>不出所料，果然没这么简单，当 nothing = 46145 时： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220131105144.png" /></p>
<p>现在的问题是什么是 comments？经过百度后发现 zip 文件有 comment，用来写额外的描述数据。python 中有 zipfile 库可以获得 comment。</p>
<p>最终代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re, zipfile  </span><br><span class="line">path = <span class="string">&quot;attachments/level_6/channel.zip&quot;</span>  </span><br><span class="line">nothing = <span class="string">&quot;90052&quot;</span>  </span><br><span class="line">comment = []  </span><br><span class="line">pattern = <span class="string">&quot;Next nothing is (\d+)&quot;</span>  </span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  </span><br><span class="line">        fileName = nothing + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">        content = f.read(fileName).decode(<span class="string">&quot;utf-8&quot;</span>)  </span><br><span class="line">        comment.append(f.getinfo(fileName).comment.decode(<span class="string">&#x27;utf-8&#x27;</span>))  </span><br><span class="line">        match = re.search(pattern, content)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> match:  </span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        nothing = match.group(<span class="number">1</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(comment))</span><br></pre></td></tr></table></figure></p>
<p>结果： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220131110030.png" /></p>
<p>访问 <code>http://www.pythonchallenge.com/pc/def/hockey.html</code>，得到： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">it&#x27;s in the air. look at the letters.</span><br></pre></td></tr></table></figure></p>
<p>注意到，组成 HOCKY 的字母为 oxygen，因此修改 url： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改前：http://www.pythonchallenge.com/pc/def/hockey.html</span><br><span class="line">修改后：http://www.pythonchallenge.com/pc/def/oxygen.html</span><br></pre></td></tr></table></figure></p>
<h1 id="level-7">level 7</h1>
<h2 id="题目信息-7">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201114933.png" /></p>
<p>只有上面一张奇怪的图片，页面源码也没有东西。可以看到图片上有一些灰度块，目前合理猜测就是：<strong>这些灰度块隐藏着信息。</strong></p>
<h2 id="方法-9">方法</h2>
<p>第一步，先将图片下载下来： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">img_url = <span class="string">&quot;http://www.pythonchallenge.com/pc/def/oxygen.png&quot;</span>  </span><br><span class="line">path = <span class="string">&quot;attachments/level_7/oxygen.png&quot;</span></span><br><span class="line">img = requests.get(img_url)  </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    f.write(img.content)</span><br></pre></td></tr></table></figure></p>
<p>第二步，查看图片的必要信息： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">path = <span class="string">&quot;attachments/level_7/oxygen.png&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(path)  </span><br><span class="line"><span class="built_in">print</span>(img.<span class="built_in">format</span>, img.size, img.mode)</span><br></pre></td></tr></table></figure></p>
<p>结果是： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PNG (629, 95) RGBA # 分别是后缀，（宽，高）， 模式</span><br></pre></td></tr></table></figure></p>
<p>可以看到图像的模式是 RGBA 的，那么每个像素点就是个四元组，分别为 <code>r, g, b, a</code> 前三个为红，绿，黄，最后一个为透明度（本题用不着）。需要注意一点：<strong>灰度图像的 r == g == b</strong>，因此，我们利用这点，先找到图片中的灰度条在哪几行。代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">path = <span class="string">&quot;attachments/level_7/oxygen.png&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(path)</span><br><span class="line">row = [img.getpixel((<span class="number">0</span>, x)) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(img.height)]  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(img.height):  </span><br><span class="line">    <span class="keyword">if</span> row[i][<span class="number">0</span>] == row[i][<span class="number">1</span>] == row[i][<span class="number">2</span>]:  <span class="comment"># r == g == b</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%d:&quot;</span> % i, end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(row[i])</span><br></pre></td></tr></table></figure></p>
<p>结果： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201122229.png" /></p>
<p>随便取一行即可，这里取 47，因为 <code>img.height / 2</code> 的值为 47。</p>
<p>第三步，取出 47 行的所有像素点： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">path = <span class="string">&quot;attachments/level_7/oxygen.png&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(path)</span><br><span class="line">row = [img.getpixel((x, img.height/<span class="number">2</span>)) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(img.width)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(img.width):</span><br><span class="line">    <span class="built_in">print</span>(row[i])</span><br></pre></td></tr></table></figure></p>
<p>结果： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201122525.png" /></p>
<p>发现，除了第一个之外，其余的像素点都重复了 7 次，因此我们剔除重复的：（上面的代码稍作修改） <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">path = <span class="string">&quot;attachments/level_7/oxygen.png&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(path)</span><br><span class="line">row = [img.getpixel((x, img.height/<span class="number">2</span>)) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(img.width)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, img.width, <span class="number">7</span>): <span class="comment"># 修改了这里</span></span><br><span class="line">    <span class="built_in">print</span>(row[i])</span><br></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201122931.png" /></p>
<p>第四步，每个灰度图像都有一个灰度值，因此做一个猜测：<strong>将这些灰度值当作 ascii 码，然后转为字符。</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">path = <span class="string">&quot;attachments/level_7/oxygen.png&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(path)  </span><br><span class="line">row = [img.getpixel((x, img.height/<span class="number">2</span>)) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(img.width)]  </span><br><span class="line">info = []  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, img.width, <span class="number">7</span>):  </span><br><span class="line">    info.append(<span class="built_in">chr</span>(row[i][<span class="number">0</span>]))  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(info))</span><br></pre></td></tr></table></figure></p>
<p>结果： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smart guy, you made it. the next level is [105, 110, 116, 101, 103, 114, 105, 116, 121]pe_ </span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>后边的 pe_ 我猜测是因为第一个像素点就重复了5次，而我取步长为7，导致每次取得都不是重复值里面得第一个，因为可能将重复值后面得无关的也取了进来。</p>
</blockquote>
<p>将上面结果中得数字也提取出来，当作 ascii 码处理，因此最终代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, re  </span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image  </span><br><span class="line">img_url = <span class="string">&quot;http://www.pythonchallenge.com/pc/def/oxygen.png&quot;</span>  </span><br><span class="line">path = <span class="string">&quot;attachments/level_7/oxygen.png&quot;</span>  </span><br><span class="line">img = Image.<span class="built_in">open</span>(path)  </span><br><span class="line">row = [img.getpixel((x, img.height/<span class="number">2</span>)) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(img.width)]  </span><br><span class="line">info = []  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, img.width, <span class="number">7</span>):  </span><br><span class="line">    info.append(<span class="built_in">chr</span>(row[i][<span class="number">0</span>]))  </span><br><span class="line">message = <span class="string">&quot;&quot;</span>.join(info)  </span><br><span class="line"><span class="built_in">next</span> = re.findall(<span class="string">r&#x27;(\d+)&#x27;</span>, message)  </span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">next</span>:  </span><br><span class="line">    v = <span class="built_in">int</span>(c)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(v), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></p>
<p>结果： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">integrity</span><br></pre></td></tr></table></figure></p>
<p>修改 url： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改前：http://www.pythonchallenge.com/pc/def/oxygen.html</span><br><span class="line">修改后：http://www.pythonchallenge.com/pc/def/integrity.html</span><br></pre></td></tr></table></figure></p>
<h1 id="level-8">level 8</h1>
<h2 id="题目信息-8">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201221330.png" /></p>
<p>查看页面源码： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201221350.png" /></p>
<p>发现：</p>
<ol type="1">
<li>图片中的蜜蜂可以点开，点开之后会跳出一个验证界面 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201221552.png" /></li>
<li>绿色字符串正好对应的用户名和密码</li>
</ol>
<p>但是，很明显可以看出应该是经过某种编码的，后来发现，是通过 <strong>bz2</strong> 压缩得到的。而 python 自带了 <strong>bz2</strong> 库。</p>
<h2 id="方法-10">方法</h2>
<p>代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> bz2  </span><br><span class="line">un = <span class="string">b&#x27;BZh91AY&amp;SYA\xaf\x82\r\x00\x00\x01\x01\x80\x02\xc0\x02\x00 \x00!\x9ah3M\x07&lt;]\xc9\x14\xe1BA\x06\xbe\x084&#x27;</span>  </span><br><span class="line">pw = <span class="string">b&#x27;BZh91AY&amp;SY\x94$|\x0e\x00\x00\x00\x81\x00\x03$ \x00!\x9ah3M\x13&lt;]\xc9\x14\xe1BBP\x91\xf08&#x27;</span>  </span><br><span class="line"><span class="built_in">print</span>(bz2.decompress(un), bz2.decompress(pw))</span><br></pre></td></tr></table></figure></p>
<p>结果： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;huge&#x27; b&#x27;file&#x27;</span><br><span class="line"></span><br><span class="line">用户名：huge</span><br><span class="line">密码：file</span><br></pre></td></tr></table></figure></p>
<p>然后成功登录，得到新的 url： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.pythonchallenge.com/pc/return/good.html</span><br></pre></td></tr></table></figure></p>
<h1 id="level-9">level 9</h1>
<h2 id="题目信息-9">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201230807.png" /></p>
<p>查看页面源码： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201230823.png" /></p>
<p>最开始还以为是将图中的黑点连起来，后来想想应该不太可能，然后注意到 <code>first + second</code> ，但是 first 和 second 的长度都不同，无法相加，所以应该不是简单的相加。联想到 <code>connect the dots</code> 觉得应该是将 first 和 second 连接起来，那么 first 和 second 代表的就是点的坐标。</p>
<h2 id="方法-11">方法</h2>
<p>代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw  </span><br><span class="line">first = [<span class="number">146</span>,<span class="number">399</span>,<span class="number">163</span>,<span class="number">403</span>,<span class="number">170</span>,<span class="number">393</span>,<span class="number">169</span>,<span class="number">391</span>,<span class="number">166</span>,<span class="number">386</span>,<span class="number">170</span>,<span class="number">381</span>,<span class="number">170</span>,<span class="number">371</span>,<span class="number">170</span>,<span class="number">355</span>,<span class="number">169</span>,<span class="number">346</span>,<span class="number">167</span>,<span class="number">335</span>,<span class="number">170</span>,<span class="number">329</span>,<span class="number">170</span>,<span class="number">320</span>,<span class="number">170</span>,<span class="number">310</span>,<span class="number">171</span>,<span class="number">301</span>,<span class="number">173</span>,<span class="number">290</span>,<span class="number">178</span>,<span class="number">289</span>,<span class="number">182</span>,<span class="number">287</span>,<span class="number">188</span>,<span class="number">286</span>,<span class="number">190</span>,<span class="number">286</span>,<span class="number">192</span>,<span class="number">291</span>,<span class="number">194</span>,<span class="number">296</span>,<span class="number">195</span>,<span class="number">305</span>,<span class="number">194</span>,<span class="number">307</span>,<span class="number">191</span>,<span class="number">312</span>,<span class="number">190</span>,<span class="number">316</span>,<span class="number">190</span>,<span class="number">321</span>,<span class="number">192</span>,<span class="number">331</span>,<span class="number">193</span>,<span class="number">338</span>,<span class="number">196</span>,<span class="number">341</span>,<span class="number">197</span>,<span class="number">346</span>,<span class="number">199</span>,<span class="number">352</span>,<span class="number">198</span>,<span class="number">360</span>,<span class="number">197</span>,<span class="number">366</span>,<span class="number">197</span>,<span class="number">373</span>,<span class="number">196</span>,<span class="number">380</span>,<span class="number">197</span>,<span class="number">383</span>,<span class="number">196</span>,<span class="number">387</span>,<span class="number">192</span>,<span class="number">389</span>,<span class="number">191</span>,<span class="number">392</span>,<span class="number">190</span>,<span class="number">396</span>,<span class="number">189</span>,<span class="number">400</span>,<span class="number">194</span>,<span class="number">401</span>,<span class="number">201</span>,<span class="number">402</span>,<span class="number">208</span>,<span class="number">403</span>,<span class="number">213</span>,<span class="number">402</span>,<span class="number">216</span>,<span class="number">401</span>,<span class="number">219</span>,<span class="number">397</span>,<span class="number">219</span>,<span class="number">393</span>,<span class="number">216</span>,<span class="number">390</span>,<span class="number">215</span>,<span class="number">385</span>,<span class="number">215</span>,<span class="number">379</span>,<span class="number">213</span>,<span class="number">373</span>,<span class="number">213</span>,<span class="number">365</span>,<span class="number">212</span>,<span class="number">360</span>,<span class="number">210</span>,<span class="number">353</span>,<span class="number">210</span>,<span class="number">347</span>,<span class="number">212</span>,<span class="number">338</span>,<span class="number">213</span>,<span class="number">329</span>,<span class="number">214</span>,<span class="number">319</span>,<span class="number">215</span>,<span class="number">311</span>,<span class="number">215</span>,<span class="number">306</span>,<span class="number">216</span>,<span class="number">296</span>,<span class="number">218</span>,<span class="number">290</span>,<span class="number">221</span>,<span class="number">283</span>,<span class="number">225</span>,<span class="number">282</span>,<span class="number">233</span>,<span class="number">284</span>,<span class="number">238</span>,<span class="number">287</span>,<span class="number">243</span>,<span class="number">290</span>,<span class="number">250</span>,<span class="number">291</span>,<span class="number">255</span>,<span class="number">294</span>,<span class="number">261</span>,<span class="number">293</span>,<span class="number">265</span>,<span class="number">291</span>,<span class="number">271</span>,<span class="number">291</span>,<span class="number">273</span>,<span class="number">289</span>,<span class="number">278</span>,<span class="number">287</span>,<span class="number">279</span>,<span class="number">285</span>,<span class="number">281</span>,<span class="number">280</span>,<span class="number">284</span>,<span class="number">278</span>,<span class="number">284</span>,<span class="number">276</span>,<span class="number">287</span>,<span class="number">277</span>,<span class="number">289</span>,<span class="number">283</span>,<span class="number">291</span>,<span class="number">286</span>,<span class="number">294</span>,<span class="number">291</span>,<span class="number">296</span>,<span class="number">295</span>,<span class="number">299</span>,<span class="number">300</span>,<span class="number">301</span>,<span class="number">304</span>,<span class="number">304</span>,<span class="number">320</span>,<span class="number">305</span>,<span class="number">327</span>,<span class="number">306</span>,<span class="number">332</span>,<span class="number">307</span>,<span class="number">341</span>,<span class="number">306</span>,<span class="number">349</span>,<span class="number">303</span>,<span class="number">354</span>,<span class="number">301</span>,<span class="number">364</span>,<span class="number">301</span>,<span class="number">371</span>,<span class="number">297</span>,<span class="number">375</span>,<span class="number">292</span>,<span class="number">384</span>,<span class="number">291</span>,<span class="number">386</span>,<span class="number">302</span>,<span class="number">393</span>,<span class="number">324</span>,<span class="number">391</span>,<span class="number">333</span>,<span class="number">387</span>,<span class="number">328</span>,<span class="number">375</span>,<span class="number">329</span>,<span class="number">367</span>,<span class="number">329</span>,<span class="number">353</span>,<span class="number">330</span>,<span class="number">341</span>,<span class="number">331</span>,<span class="number">328</span>,<span class="number">336</span>,<span class="number">319</span>,<span class="number">338</span>,<span class="number">310</span>,<span class="number">341</span>,<span class="number">304</span>,<span class="number">341</span>,<span class="number">285</span>,<span class="number">341</span>,<span class="number">278</span>,<span class="number">343</span>,<span class="number">269</span>,<span class="number">344</span>,<span class="number">262</span>,<span class="number">346</span>,<span class="number">259</span>,<span class="number">346</span>,<span class="number">251</span>,<span class="number">349</span>,<span class="number">259</span>,<span class="number">349</span>,<span class="number">264</span>,<span class="number">349</span>,<span class="number">273</span>,<span class="number">349</span>,<span class="number">280</span>,<span class="number">349</span>,<span class="number">288</span>,<span class="number">349</span>,<span class="number">295</span>,<span class="number">349</span>,<span class="number">298</span>,<span class="number">354</span>,<span class="number">293</span>,<span class="number">356</span>,<span class="number">286</span>,<span class="number">354</span>,<span class="number">279</span>,<span class="number">352</span>,<span class="number">268</span>,<span class="number">352</span>,<span class="number">257</span>,<span class="number">351</span>,<span class="number">249</span>,<span class="number">350</span>,<span class="number">234</span>,<span class="number">351</span>,<span class="number">211</span>,<span class="number">352</span>,<span class="number">197</span>,<span class="number">354</span>,<span class="number">185</span>,<span class="number">353</span>,<span class="number">171</span>,<span class="number">351</span>,<span class="number">154</span>,<span class="number">348</span>,<span class="number">147</span>,<span class="number">342</span>,<span class="number">137</span>,<span class="number">339</span>,<span class="number">132</span>,<span class="number">330</span>,<span class="number">122</span>,<span class="number">327</span>,<span class="number">120</span>,<span class="number">314</span>,<span class="number">116</span>,<span class="number">304</span>,<span class="number">117</span>,<span class="number">293</span>,<span class="number">118</span>,<span class="number">284</span>,<span class="number">118</span>,<span class="number">281</span>,<span class="number">122</span>,<span class="number">275</span>,<span class="number">128</span>,<span class="number">265</span>,<span class="number">129</span>,<span class="number">257</span>,<span class="number">131</span>,<span class="number">244</span>,<span class="number">133</span>,<span class="number">239</span>,<span class="number">134</span>,<span class="number">228</span>,<span class="number">136</span>,<span class="number">221</span>,<span class="number">137</span>,<span class="number">214</span>,<span class="number">138</span>,<span class="number">209</span>,<span class="number">135</span>,<span class="number">201</span>,<span class="number">132</span>,<span class="number">192</span>,<span class="number">130</span>,<span class="number">184</span>,<span class="number">131</span>,<span class="number">175</span>,<span class="number">129</span>,<span class="number">170</span>,<span class="number">131</span>,<span class="number">159</span>,<span class="number">134</span>,<span class="number">157</span>,<span class="number">134</span>,<span class="number">160</span>,<span class="number">130</span>,<span class="number">170</span>,<span class="number">125</span>,<span class="number">176</span>,<span class="number">114</span>,<span class="number">176</span>,<span class="number">102</span>,<span class="number">173</span>,<span class="number">103</span>,<span class="number">172</span>,<span class="number">108</span>,<span class="number">171</span>,<span class="number">111</span>,<span class="number">163</span>,<span class="number">115</span>,<span class="number">156</span>,<span class="number">116</span>,<span class="number">149</span>,<span class="number">117</span>,<span class="number">142</span>,<span class="number">116</span>,<span class="number">136</span>,<span class="number">115</span>,<span class="number">129</span>,<span class="number">115</span>,<span class="number">124</span>,<span class="number">115</span>,<span class="number">120</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">117</span>,<span class="number">113</span>,<span class="number">120</span>,<span class="number">109</span>,<span class="number">122</span>,<span class="number">102</span>,<span class="number">122</span>,<span class="number">100</span>,<span class="number">121</span>,<span class="number">95</span>,<span class="number">121</span>,<span class="number">89</span>,<span class="number">115</span>,<span class="number">87</span>,<span class="number">110</span>,<span class="number">82</span>,<span class="number">109</span>,<span class="number">84</span>,<span class="number">118</span>,<span class="number">89</span>,<span class="number">123</span>,<span class="number">93</span>,<span class="number">129</span>,<span class="number">100</span>,<span class="number">130</span>,<span class="number">108</span>,<span class="number">132</span>,<span class="number">110</span>,<span class="number">133</span>,<span class="number">110</span>,<span class="number">136</span>,<span class="number">107</span>,<span class="number">138</span>,<span class="number">105</span>,<span class="number">140</span>,<span class="number">95</span>,<span class="number">138</span>,<span class="number">86</span>,<span class="number">141</span>,<span class="number">79</span>,<span class="number">149</span>,<span class="number">77</span>,<span class="number">155</span>,<span class="number">81</span>,<span class="number">162</span>,<span class="number">90</span>,<span class="number">165</span>,<span class="number">97</span>,<span class="number">167</span>,<span class="number">99</span>,<span class="number">171</span>,<span class="number">109</span>,<span class="number">171</span>,<span class="number">107</span>,<span class="number">161</span>,<span class="number">111</span>,<span class="number">156</span>,<span class="number">113</span>,<span class="number">170</span>,<span class="number">115</span>,<span class="number">185</span>,<span class="number">118</span>,<span class="number">208</span>,<span class="number">117</span>,<span class="number">223</span>,<span class="number">121</span>,<span class="number">239</span>,<span class="number">128</span>,<span class="number">251</span>,<span class="number">133</span>,<span class="number">259</span>,<span class="number">136</span>,<span class="number">266</span>,<span class="number">139</span>,<span class="number">276</span>,<span class="number">143</span>,<span class="number">290</span>,<span class="number">148</span>,<span class="number">310</span>,<span class="number">151</span>,<span class="number">332</span>,<span class="number">155</span>,<span class="number">348</span>,<span class="number">156</span>,<span class="number">353</span>,<span class="number">153</span>,<span class="number">366</span>,<span class="number">149</span>,<span class="number">379</span>,<span class="number">147</span>,<span class="number">394</span>,<span class="number">146</span>,<span class="number">399</span>]  </span><br><span class="line">second = [<span class="number">156</span>,<span class="number">141</span>,<span class="number">165</span>,<span class="number">135</span>,<span class="number">169</span>,<span class="number">131</span>,<span class="number">176</span>,<span class="number">130</span>,<span class="number">187</span>,<span class="number">134</span>,<span class="number">191</span>,<span class="number">140</span>,<span class="number">191</span>,<span class="number">146</span>,<span class="number">186</span>,<span class="number">150</span>,<span class="number">179</span>,<span class="number">155</span>,<span class="number">175</span>,<span class="number">157</span>,<span class="number">168</span>,<span class="number">157</span>,<span class="number">163</span>,<span class="number">157</span>,<span class="number">159</span>,<span class="number">157</span>,<span class="number">158</span>,<span class="number">164</span>,<span class="number">159</span>,<span class="number">175</span>,<span class="number">159</span>,<span class="number">181</span>,<span class="number">157</span>,<span class="number">191</span>,<span class="number">154</span>,<span class="number">197</span>,<span class="number">153</span>,<span class="number">205</span>,<span class="number">153</span>,<span class="number">210</span>,<span class="number">152</span>,<span class="number">212</span>,<span class="number">147</span>,<span class="number">215</span>,<span class="number">146</span>,<span class="number">218</span>,<span class="number">143</span>,<span class="number">220</span>,<span class="number">132</span>,<span class="number">220</span>,<span class="number">125</span>,<span class="number">217</span>,<span class="number">119</span>,<span class="number">209</span>,<span class="number">116</span>,<span class="number">196</span>,<span class="number">115</span>,<span class="number">185</span>,<span class="number">114</span>,<span class="number">172</span>,<span class="number">114</span>,<span class="number">167</span>,<span class="number">112</span>,<span class="number">161</span>,<span class="number">109</span>,<span class="number">165</span>,<span class="number">107</span>,<span class="number">170</span>,<span class="number">99</span>,<span class="number">171</span>,<span class="number">97</span>,<span class="number">167</span>,<span class="number">89</span>,<span class="number">164</span>,<span class="number">81</span>,<span class="number">162</span>,<span class="number">77</span>,<span class="number">155</span>,<span class="number">81</span>,<span class="number">148</span>,<span class="number">87</span>,<span class="number">140</span>,<span class="number">96</span>,<span class="number">138</span>,<span class="number">105</span>,<span class="number">141</span>,<span class="number">110</span>,<span class="number">136</span>,<span class="number">111</span>,<span class="number">126</span>,<span class="number">113</span>,<span class="number">129</span>,<span class="number">118</span>,<span class="number">117</span>,<span class="number">128</span>,<span class="number">114</span>,<span class="number">137</span>,<span class="number">115</span>,<span class="number">146</span>,<span class="number">114</span>,<span class="number">155</span>,<span class="number">115</span>,<span class="number">158</span>,<span class="number">121</span>,<span class="number">157</span>,<span class="number">128</span>,<span class="number">156</span>,<span class="number">134</span>,<span class="number">157</span>,<span class="number">136</span>,<span class="number">156</span>,<span class="number">136</span>]  </span><br><span class="line">img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (<span class="number">500</span>, <span class="number">500</span>))  </span><br><span class="line">draw = ImageDraw.Draw(img)  </span><br><span class="line">draw.polygon(first, fill = <span class="string">&#x27;white&#x27;</span>)  </span><br><span class="line">draw.polygon(second, fill = <span class="string">&#x27;white&#x27;</span>)  </span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure></p>
<p>结果是： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201231228.png" /></p>
<p>牛的英文是 cow，修改 url 为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.pythonchallenge.com/pc/return/cow.html</span><br></pre></td></tr></table></figure>
<p>提示： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hmm. it&#x27;s a male.</span><br></pre></td></tr></table></figure></p>
<p>也就是公牛，英语为 bull。修改 url 为： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改前：http://www.pythonchallenge.com/pc/return/cow.html</span><br><span class="line">修改后：http://www.pythonchallenge.com/pc/return/bull.html</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>如果出现验证的框，输入 level 8 得到的用户名和密码即可。</p>
</blockquote>
<p>其实，只有 first 也能画出这头牛，而 second 画出来的长这样： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201231802.png" /></p>
<p>不知道是否可以理解为 <strong>性器官？？？</strong></p>
<h1 id="附录">附录</h1>
<ol type="1">
<li>网址：<a href="http://www.pythonchallenge.com/">python challenge</a></li>
<li>解法：<a href="https://www.hackingnote.com/en/python-challenge-solutions/overview">python challenge solutions</a></li>
</ol>
]]></content>
      <categories>
        <category>python</category>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
